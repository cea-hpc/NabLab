module VariableAffectations;

with CartesianMesh2D.*;
with Math.*;
with LinearAlgebra.*;

// Simulation options
ℝ t, δt;
ℝ[2] X{nodes};

/* For each test, input variables are declared and initialized with values */

/******* Cases : scalars *******/
let ℕ valInput_test1 = 8;
ℕ valOutput_test1;

let ℕ valInput_test2 = 9;
let ℕ  valOutput_test2 = 0;

let ℝ valInput_test3 = 4.0;
ℝ valOutput_test3;

let ℝ valInput_test4 = 7.0;
let ℝ valOutput_test4 = 0.0;

/******* Cases : arrays with the same values *******/

let ℝ[5] valInput_test5 = ℝ[5](5.0);
ℝ[5] valOutput_test5;

let ℝ[5] valInput_test6 = ℝ[5](2.0);
let ℝ[5] valOutput_test6 = ℝ[5](0.0);

let ℕ[5] valInput_test7 = ℕ[5](5);
ℕ[5] valOutput_test7;

let ℕ[5] valInput_test8 = ℕ[5](5);
let ℕ[5] valOutput_test8 = ℕ[5](0);

/******* Cases : arrays with different values *******/
let ℝ[5] valInput_test9  = [1.0, 2.0, 3.0, 4.0, 5.0];
ℝ[5] valOutput_test9;

let ℝ[5] valInput_test10  = [1.0, 2.0, 3.0, 4.0, 5.0];
let ℝ[5] valOutput_test10 = [0.0, 0.0, 0.0, 0.0, 0.0];

let ℕ[5] valInput_test11  = [4, 7, 3, 8, 5];
ℕ[5] valOutput_test11;

let ℕ[5] valInput_test12  = [4, 7, 3, 8, 5];
let ℕ[5] valOutput_test12 = [0, 0, 0, 0, 0];

/******* Cases : matrices initialized with a single value *******/
let ℝ[6,5] valInput_test13 =  ℝ[6,5](5.0);
ℝ[6,5] valOutput_test13;

let ℝ[6,5] valInput_test14 =  ℝ[6,5](5.0);
let ℝ[6,5] valOutput_test14 =  ℝ[6,5](0.0);

let ℕ[6,5] valInput_test15 =  ℕ[6,5](4);
ℕ[6,5] valOutput_test15;

let ℕ[6,5] valInput_test16 =  ℕ[6,5](4);
let ℕ[6,5] valOutput_test16 = ℕ[6,5](0);

/******* Cases : matrices with different values *******/
let ℝ[2,2] valInput_test17  = [ [1.0, 2.0], [4.0, 5.0] ];
ℝ[2,2] valOutput_test17;

let ℝ[2,2] valInput_test18  = [ [1.0, 2.0], [4.0, 5.0] ];
let ℝ[2,2] valOutput_test18 = [ [0.0, 0.0], [0.0, 0.0] ];

let ℕ[2,2] valInput_test19  = [ [3, 4], [7, 5] ];
ℕ[2,2] valOutput_test19;

let ℕ[2,2] valInput_test20  = [ [3, 4], [7, 5] ];
let ℕ[2,2] valOutput_test20 = [ [0, 0], [0, 0] ];

/********Test 1 on the multiplication between 2 scalars of integer type 
 	* Test with a declared but uninitialized output scalar 
		* let ℕ valInput_test1 = 8;
 	    * ℕ valOutput_test1;
***************************************************************************/
MultiScalarByScalar_test1: valOutput_test1 = valInput_test1*3;


/********Test 2 on the multiplication between 2 scalars of integer type  
 	* Test with a declared but uninitialized output scalar 
 		* let ℕ valInput_test2 = 9;
 		* let ℕ  valOutput_test2 = 0;
***************************************************************************/
MultiScalarByScalar_test2: valOutput_test2 = valInput_test2*3;


/********Test 3 on the multiplication between 2 scalars of real type  
 	* Test with a declared and but uninitialized output scalar 
		* let ℝ valInput_test3 = 4.0;
 		* ℝ valOutput_test3; 
***************************************************************************/
MultiScalarByScalar_test3: valOutput_test3 = valInput_test3*5.0;


/********Test 4 on the multiplication between 2 scalars of real type  
 	* Test with a declared and initialized output scalar 
 		* let ℝ valInput_test4 = 7.0;
 		* let ℝ valOutput_test4 = 0.0;
***************************************************************************/
MultiScalarByScalar_test4: valOutput_test4 = valInput_test4*12;


/********Test 5 on the multiplication between an array and a scalar of real type  
 	* Test with an input array initialized with the same values (5.0)
 	* Test with an output array uninitialized 
		* let ℝ[5] valInput_test5 = ℝ[5](5.0);
		* ℝ[5] valOutput_test5;
***************************************************************************/
MultiVectorByScalar_test5: valOutput_test5 = valInput_test5*6.0 + 2;


/********Test 6 on the multiplication between an array and a scalar of real type  
 	* Test with an input array initialized with the same values (2.0)
 	* Test with an output array initialized with the same values (0.0)
 		* let ℝ[5] valInput_test6 = ℝ[5](2.0);
 		* let ℝ[5] valOutput_test6 = ℝ[5](0.0);
***************************************************************************/
MultiVectorByScalar_test6: valOutput_test6 = valInput_test6*6.0 + 2;


/********Test 7 on the multiplication between an array and a scalar of integer type  
 	* Test with an input array initialized with the same values (5)
 	* Test with an output array uninitialized
		* let ℕ[5] valInput_test7 = ℕ[5](5);
		* ℕ[5] valOutput_test7;
***************************************************************************/
MultiVectorByScalar_test7: valOutput_test7 = valInput_test7*4 + 2;


/********Test 8 on the multiplication between an array and a scalar of integer type  
 	* Test with an input array initialized with the same values (5)
 	* Test with an output array initialized with the same values (0)
 		* let ℕ[5] valInput_test8 = ℕ[5](5);
 		* let ℕ[5] valOutput_test8 = ℕ[5](0);
***************************************************************************/
MultiVectorByScalar_test8: valOutput_test8 = valInput_test8*4 + 2;


/********Test 9 on the multiplication between an array and a scalar of real type  
 	* Test with an input array initialized with the different values
 	* Test with an output array uninitialized
 		* let ℝ[5] valInput_test9  = [1.0, 2.0, 3.0, 4.0, 5.0];
 		* ℝ[5] valOutput_test9;
***************************************************************************/
MultiVectorByScalar_test9: valOutput_test9 = valInput_test9*2.0 +3.0;


/********Test 10 on the multiplication between an array and a scalar of real type  
 	* Test with an input array initialized with the different values
 	* Test with an output array initialized with the values at 0 : [0.0, ...,0.0]
 		* let ℝ[5] valInput_test10  = [1.0, 2.0, 3.0, 4.0, 5.0];
 		* let ℝ[5] valOutput_test10 = [0.0, 0.0, 0.0, 0.0, 0.0]; 
***************************************************************************/
MultiVectorByScalar_test10: valOutput_test10 = valInput_test10*2.0 +3.0;


/********Test 11 on the multiplication between an array and a scalar of integer type  
 	* Test with an input array initialized with the different values
 	* Test with an output array uninitialized
 		* let ℕ[5] valInput_test11  = [4, 7, 3, 8, 5];
 		* ℕ[5] valOutput_test11;
***************************************************************************/
MultiVectorByScalar_test11: valOutput_test11 = valInput_test11*2 +3;


/********Test 12 on the multiplication between an array and a scalar of integer type  
 	* Test with an input array initialized with the different values
 	* Test with an output array initialized with the values at 0 : [0.0, ...,0.0] 
 		* let ℕ[5] valInput_test12  = [4, 7, 3, 8, 5];
 		* let ℕ[5] valOutput_test12 = [0, 0, 0, 0, 0];
***************************************************************************/
MultiVectorByScalar_test12: valOutput_test12 = valInput_test12*3 +7;


/********Test 13 on the multiplication between a matrice and a scalar of real type  
 	* Test with an input array initialized with the same values (5.0)
 	* Test with an output array uninitialized
 		* let ℝ[6,5] valInput_test13 =  ℝ[6,5](5.0);
 		* ℝ[6,5] valOutput_test13;
***************************************************************************/
MultiVectorByScalar_test13: valOutput_test13 = valInput_test13*2 + 5;


/********Test 14 on the multiplication between a matrice and a scalar of real type  
 	* Test with an input array initialized with the same values (5.0)
 	* Test with an output array initialized with a single value (0.0)
 		* let ℝ[6,5] valInput_test14 =  ℝ[6,5](5.0);
 		* let ℝ[6,5] valOutput_test14 =  ℝ[6,5](0.0);
***************************************************************************/
MultiVectorByScalar_test14: valOutput_test14 = valInput_test14*3 + 6;


/********Test 15 on the multiplication between a matrice and a scalar of integer type  
 	* Test with an input array initialized with the same values (4)
 	* Test with an output array uninitialized
 		* let ℕ[6,5] valInput_test15 =  ℕ[6,5](4);
 		* ℕ[6,5] valOutput_test15;
***************************************************************************/
MultiVectorByScalar_test15: valOutput_test15 = valInput_test15*5 + 1;


/********Test 16 on the multiplication between a matrice and a scalar of integer type  
 	* Test with an input array initialized with the same values (4)
 	* Test with an output array initialized with a single value (0)
 		* let ℕ[6,5] valInput_test16 =  ℕ[6,5](4);
 		* let ℕ[6,5] valOutput_test16 = ℕ[6,5](0);
***************************************************************************/
MultiVectorByScalar_test16: valOutput_test16 = valInput_test16*2 + 3;


/********Test 17 on the multiplication between a matrice and a scalar of real type  
 	* Test with an input array initialized with the different values
 	* Test with an output array uninitialized 
 		* let ℝ[2,2] valInput_test17  = [ [1.0, 2.0], [4.0, 5.0] ];
 		* ℝ[2,2] valOutput_test17;
***************************************************************************/
MultiVectorByScalar_test17: valOutput_test17 = valInput_test17*2.0 +3.0;


/********Test 18 on the multiplication between a matrice and a scalar of real type  
 	* Test with an input array initialized with the different values
 	* Test with an output matrice initialized with the values at 0 : [[0.0, ...,0.0], ..., [0.0, ...,0.0]] 
 		* let ℝ[2,2] valInput_test18  = [ [1.0, 2.0], [4.0, 5.0] ];
 		* let ℝ[2,2] valOutput_test18 = [ [0.0, 0.0], [0.0, 0.0] ];
***************************************************************************/
MultiVectorByScalar_test18: valOutput_test18 = valInput_test18*3.0 +4.0;


/********Test 19 on the multiplication between a matrice and a scalar of integer type  
 	* Test with an input array initialized with the different values
 	* Test with an output array uninitialized
 		* let ℕ[2,2] valInput_test19  = [ [3, 4], [7, 5] ];
 		* ℕ[2,2] valOutput_test19;
***************************************************************************/
MultiVectorByScalar_test19: valOutput_test19 = valInput_test19*2 +3;


/********Test 20 on the multiplication between a matrice and a scalar of integer type  
 	* Test with an input array initialized with the different values
 	* Test with an output matrice initialized with the values at 0 : [[0.0, ...,0.0], ..., [0.0, ...,0.0]] 
 		* let ℕ[2,2] valInput_test20  = [ [3, 4], [7, 5] ];
 		* let ℕ[2,2] valOutput_test20 = [ [0, 0], [0, 0] ];
***************************************************************************/
MultiVectorByScalar_test20: valOutput_test20 = valInput_test20*3 +4;
