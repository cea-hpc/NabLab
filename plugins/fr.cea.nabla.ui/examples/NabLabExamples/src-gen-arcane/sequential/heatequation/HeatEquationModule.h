/* DO NOT EDIT THIS FILE - it is machine generated */

#ifndef __HEATEQUATIONMODULE_H_
#define __HEATEQUATIONMODULE_H_

#include <arcane/utils/NumArray.h>
#include <arcane/datatype/RealArrayVariant.h>
#include <arcane/datatype/RealArray2Variant.h>
#include <arcane/IParallelMng.h>
#include "HeatEquation_axl.h"
#include "CartesianMesh2D.h"

using namespace Arcane;

/*** Free functions **********************************************************/

namespace heatequationfreefuncs
{
	const Real det(RealArrayVariant a, RealArrayVariant b);
	const Real norm(RealArrayVariant a);
	const Real dot(RealArrayVariant a, RealArrayVariant b);
	RealArrayVariant sumR1(RealArrayVariant a, RealArrayVariant b);
	const Real sumR0(const Real a, const Real b);
	RealArrayVariant operatorAdd(RealArrayVariant a, RealArrayVariant b);
	RealArrayVariant operatorMult(const Real a, RealArrayVariant b);
	RealArrayVariant operatorSub(RealArrayVariant a, RealArrayVariant b);
}

/*** Module/Service **********************************************************/

class HeatEquationModule
: public ArcaneHeatEquationObject
{
public:
	HeatEquationModule(const ModuleBuildInfo& mbi);
	~HeatEquationModule() {}

	// entry points
	virtual void init() override;
	virtual void executeTimeLoopN() override;

	VersionInfo versionInfo() const override { return VersionInfo(1, 0, 0); }

public:
	// jobs
	virtual void computeOutgoingFlux();
	virtual void computeSurface();
	virtual void computeTn();
	virtual void computeV();
	virtual void iniCenter();
	virtual void iniF();
	virtual void iniTime();
	virtual void computeUn();
	virtual void iniUn();
	virtual void setUpTimeLoopN();
	virtual void synchronizeBeforeTimeLoop();

private:
	// mesh attributes
	CartesianMesh2D* m_mesh;

	// other attributes
	Int32 m_lastDump;
	Int32 m_n;
	static constexpr Real m_PI = 3.1415926;
	static constexpr Real m_alpha = 1.0;
	static constexpr Real m_deltat = 0.001;
	Real m_t_n;
	Real m_t_nplus1;
	Real m_t_n0;
};

#endif
