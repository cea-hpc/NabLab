/* DO NOT EDIT THIS FILE - it is machine generated */

#ifndef __EXPLICITHEATEQUATIONMODULE_H_
#define __EXPLICITHEATEQUATIONMODULE_H_

#include <arcane/utils/Array.h>
#include "ExplicitHeatEquation_axl.h"
#include "CartesianMesh2D.h"

using namespace Arcane;

/******************** Free functions declarations ********************/

namespace explicitheatequationfreefuncs
{
const Real norm(ConstArrayView<Real> a);
const Real dot(ConstArrayView<Real> a, ConstArrayView<Real> b);
const Real det(const Real2 a, const Real2 b);
ConstArrayView<Real> sumR1(ConstArrayView<Real> a, ConstArrayView<Real> b);
const Real minR0(const Real a, const Real b);
const Real sumR0(const Real a, const Real b);
const Real prodR0(const Real a, const Real b);
ConstArrayView<Real> operator+(ConstArrayView<Real> a, ConstArrayView<Real> b);
const Real2 operator-(const Real2 a, const Real2 b);
const Real2 operator*(const Real a, const Real2 b);
}

/******************** Module declaration ********************/

class ExplicitHeatEquationModule
: public ArcaneExplicitHeatEquationObject
{
public:
	ExplicitHeatEquationModule(const ModuleBuildInfo& mbi)
	: ArcaneExplicitHeatEquationObject(mbi) {}
	~ExplicitHeatEquationModule() {}

	virtual void init() override;
	virtual void compute() override;

	VersionInfo versionInfo() const override { return VersionInfo(1, 0, 0); }

private:
	void computeFaceLength();
	void computeTn();
	void computeV();
	void initD();
	void initTime();
	void initXc();
	void updateU();
	void computeDeltaTn();
	void computeFaceConductivity();
	void initU();
	void setUpTimeLoopN();
	void computeAlphaCoeff();

private:
	CartesianMesh2D* m_mesh;
};

#endif
