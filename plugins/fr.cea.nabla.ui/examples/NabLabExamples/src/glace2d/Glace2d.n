/*******************************************************************************
 * Copyright (c) 2021 CEA
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 * Contributors: see AUTHORS file
 *******************************************************************************/
module Glace2d;

with Math.*;
with CartesianMesh2D.*;

// Only for 2D vectors
def perp: ℝ[2] → ℝ[2], (a) → return [ a[1], -a[0] ];

def trace: l | ℝ[l,l] → ℝ, (a) → {
	let ℝ result = 0.0;
	∀ ia ∈ [0;l[, result = result + a[ia, ia];
	return result;
}

def tensProduct: l | ℝ[l] × ℝ[l] → ℝ[l,l], (a, b) → {
	ℝ[l,l] result;
	∀ ia ∈ [0;l[,
		∀ ib ∈ [0;l[,
			result[ia,ib] = a[ia]*b[ib];
	return result;
}

// Only for 2x2 matrices
def inverse: ℝ[2,2] → ℝ[2,2], (a) → {
	let ℝ alpha = 1.0 / det(a);
	return [[ a[1,1] * alpha, -a[0,1] * alpha ],
			[-a[1,0] * alpha,  a[0,0] * alpha ]];
}

// Simulation options
ℝ stopTime;
ℕ maxIterations;

// User options
let ℝ γ = 1.4;
let ℝ xInterface = 0.5;
let ℝ δtCfl = 0.4;
let ℝ ρIniZg = 1.0;
let ℝ ρIniZd = 0.125;
let ℝ pIniZg = 1.0;
let ℝ pIniZd = 0.1;

ℝ t, δt;
ℝ[2] X{nodes}, b{nodes}, bt{nodes};
ℝ[2,2] Ar{nodes}, Mt{nodes};
ℝ[2] ur{nodes};
ℝ c{cells}, m{cells}, p{cells}, ρ{cells}, e{cells}, E{cells}, V{cells};
ℝ δtj{cells};
ℝ[2] uj{cells};
ℝ l{cells, nodesOfCell};
ℝ[2] Cjr_ic{cells, nodesOfCell}, C{cells, nodesOfCell}, F{cells, nodesOfCell};
ℝ[2,2] Ajr{cells, nodesOfCell};

iterate n while (t^{n+1} < stopTime && n+1 < maxIterations);

// *************************************************************
// * Initialization
// *************************************************************
IniTime: t^{n=0} = 0.0;
IniCjrIc: ∀j∈cells(), ∀r∈nodesOfCell(j),
	Cjr_ic{j,r} = 0.5 * perp(X^{n=0}{r+1} - X^{n=0}{r-1});

Initialize: ∀j∈cells(), {
	ℝ ρ_ic, p_ic;
	let ℝ[2] center = 0.25 * ∑{r∈nodesOfCell(j)}(X^{n=0}{r});
	if (center[0] < xInterface) {
		ρ_ic = ρIniZg;
		p_ic = pIniZg;
	} else {
		ρ_ic = ρIniZd;
		p_ic = pIniZd;
	}
	let ℝ V_ic = 0.5 * ∑{r∈nodesOfCell(j)}(dot(Cjr_ic{j,r}, X^{n=0}{r}));
	m{j} = ρ_ic * V_ic; // m is a constant
	p{j} = p_ic;
	ρ{j} = ρ_ic;
	E^{n}{j} = p_ic / ((γ-1.0) * ρ_ic);
	uj^{n}{j} = [0.0, 0.0];
}

// *************************************************************
// * C{j,r} and dependent variables computation 
// *************************************************************
ComputeCjr: ∀j∈cells(), ∀r∈nodesOfCell(j), C{j,r} = 0.5 * perp(X^{n}{r+1} - X^{n}{r-1});
ComputeLjr: ∀j∈cells(), ∀r∈nodesOfCell(j), l{j,r} = norm(C{j,r});
Computeδtj: ∀j∈cells(), δtj{j} = 2.0 * V{j} / (c{j} * ∑{r∈nodesOfCell(j)}(l{j,r}));

// *************************************************************
// * Standard EOS rules: m, ρ, c, p, e
// *************************************************************
ComputeDensity: ∀j∈cells(), ρ{j} = m{j} / V{j};
ComputeEOSp: ∀j∈cells(), p{j} = (γ-1.0) * ρ{j} * e{j};
ComputeInternalEnergy: ∀j∈cells(), e{j} = E^{n}{j} - 0.5 * dot(uj^{n}{j}, uj^{n}{j});
ComputeEOSc: ∀j∈cells(), c{j} = √(γ * p{j} / ρ{j}); 

// *************************************************************
// * Cell-centered Godunov Scheme for Lagragian gas dynamics
// *************************************************************
ComputeAjr: ∀j∈cells(), ∀r∈nodesOfCell(j), Ajr{j,r} = ((ρ{j} * c{j}) / l{j,r}) * tensProduct(C{j,r}, C{j,r});
ComputeFjr: ∀j∈cells(), ∀r∈nodesOfCell(j), F{j,r} = p{j} * C{j,r} + matVectProduct(Ajr{j,r}, (uj^{n}{j}-ur{r}));
ComputeAr: ∀r∈nodes(), Ar{r} = ∑{j∈cellsOfNode(r)}(Ajr{j,r});
ComputeBr: ∀r∈nodes(), b{r} = ∑{j∈cellsOfNode(r)}(p{j} * C{j,r} + matVectProduct(Ajr{j,r}, uj^{n}{j}));
ComputeMt: ∀r∈innerNodes(), Mt{r} = Ar{r};
ComputeBt: ∀r∈innerNodes(), bt{r} = b{r};

ComputeBoundaryConditions: {
	let ℝ[2,2] I = [ [1.0, 0.0], [0.0, 1.0] ];

	// Y boundary conditions (must be done before X)
	∀r∈topNodes(), {
		let ℝ[2] N = [0.0, 1.0];
		let ℝ[2,2] NxN = tensProduct(N,N);
		let ℝ[2,2] IcP = I - NxN;
		bt{r} = matVectProduct(IcP, b{r});
		Mt{r} = IcP * (Ar{r} * IcP) + NxN*trace(Ar{r});
	}
	∀r∈bottomNodes(), {
		let ℝ[2] N = [0.0, -1.0];
		let ℝ[2,2] NxN = tensProduct(N,N);
		let ℝ[2,2] IcP = I - NxN;
		bt{r} = matVectProduct(IcP, b{r});
		Mt{r} = IcP * (Ar{r} * IcP) + NxN*trace(Ar{r});
	}

	// X boundary conditions
	∀r∈leftNodes(),{
		Mt{r} = I;
		bt{r} = [0.0, 0.0];
	}
	∀r∈rightNodes(),{
		Mt{r} = I;
		bt{r} = [0.0, 0.0];
	}
}

ComputeU: ∀r∈nodes(), ur{r} = matVectProduct(inverse(Mt{r}), bt{r});
ComputeV: ∀j∈cells(), V{j} = 0.5 * ∑{r∈nodesOfCell(j)}(dot(C{j,r}, X^{n}{r}));

// *************************************************************
// * Loop iteration (n)
// *************************************************************
ComputeXn: ∀r∈nodes(), X^{n+1}{r} = X^{n}{r} + δt * ur{r};
ComputeUn: ∀j∈cells(), uj^{n+1}{j} = uj^{n}{j} - (δt/m{j}) * ∑{r∈nodesOfCell(j)}(F{j,r});
ComputeEn: ∀j∈cells(), E^{n+1}{j} = E^{n}{j} - (δt / m{j}) * ∑{r∈nodesOfCell(j)}(dot(F{j,r}, ur{r}));
ComputeDt: δt = min((δtCfl * Min{j∈cells()}(δtj{j})), (stopTime-t^{n}));
ComputeTn: t^{n+1} = t^{n} + δt;
