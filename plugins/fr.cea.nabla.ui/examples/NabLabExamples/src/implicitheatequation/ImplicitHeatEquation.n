/*******************************************************************************
 * Copyright (c) 2022 CEA
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 * Contributors: see AUTHORS file
 *******************************************************************************/
module ImplicitHeatEquation;

with Math.*;
with LinearAlgebra.*;
with CartesianMesh2D.*;

// Simulation options
real stopTime;
int maxIterations;

let real u0 = 1.0;
let real[2] vectOne = real[2](1.0);
let real delta_t = 0.001;
real t;
real[2] X{nodes}, Xc{cells}; // Position of nodes and cells center of gravity 
real u{cells}; // Temperature
real V{cells}; // Volume of cells
real D{cells}; // Cell centered conductivity
real faceLength{faces}, faceConductivity{faces};
real alpha{cells, cells}; 

iterate n while (t^{n+1} < stopTime && n+1 < maxIterations);

InitTime: t^{n=0} = 0.0;

InitXc: ∀c∈cells(), Xc{c} = 0.25 * sum{p∈nodesOfCell(c)}(X{p});  // Only valid on parallelograms

InitU: ∀c∈cells(),
	if (norm(Xc{c} - vectOne) < 0.5)
		u^{n}{c} = u0;
	else 
		u^{n}{c} = 0.0; // Initial circle in the center with value u0

InitD: ∀c∈cells(), D{c} = 1.0; 

ComputeDeltaTn: delta_t = Min{c∈cells()}(V{c}/D{c}) * 0.24;
ComputeV: ∀j∈cells(), V{j} = 0.5 * sum{p∈nodesOfCell(j)}(det(X{p}, X{p+1}));
ComputeFaceLength: ∀f∈faces(), faceLength{f} = 0.5 * sum{p∈nodesOfFace(f)}(norm(X{p} - X{p+1}));
ComputeFaceConductivity: ∀f∈faces(), faceConductivity{f} = 2.0 * prod{c1∈cellsOfFace(f)}(D{c1}) / sum{c2∈cellsOfFace(f)}(D{c2});

// Assembling of the diffusion matrix
ComputeAlphaCoeff: ∀c∈cells(), {
	let real alpha_Diag = 0.0;
	∀d∈neighbourCells(c), ∀f∈commonFace(c,d), {
		let real alpha_ExtraDiag = - delta_t / V{c} * (faceLength{f} *  faceConductivity{f}) / norm(Xc{c} - Xc{d});
		alpha{c, d} = alpha_ExtraDiag;
		alpha_Diag = alpha_Diag + alpha_ExtraDiag;
	}
	alpha{c, c} = 1 - alpha_Diag;
}

UpdateU: u^{n+1} = solveLinearSystem(alpha, u^{n});
ComputeTn: t^{n+1} = t^{n} + delta_t;
