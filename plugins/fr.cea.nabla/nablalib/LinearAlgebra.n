/*******************************************************************************
 * Copyright (c) 2022 CEA
 * This program and the accompanying materials are made available under the 
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 * Contributors: see AUTHORS file
 *******************************************************************************/
linearalgebra extension LinearAlgebra;

/*
 *  Initial guess API is not provided for JAVA backend
 */
// Solves Ax=b
def <x> real[x] solveLinearSystem(real[x, x] A, real[x] b);

// Solves Ax=b, given x0
def <x> real[x] solveLinearSystem(real[x, x] A, real[x] b, real[x] x0);

// Solves C^-1(Ax)=C^-1 b
def <x> real[x] solveLinearSystem(real[x, x] A, real[x] b, real[x, x] C);

// Solves Ax=b, given x0 with iterations threshold
def <x> real[x] solveLinearSystem(real[x, x] A, real[x] b, real[x] x0, int maxIterations);

// Solves C^-1(Ax)=C^-1 b, given x0
def <x> real[x] solveLinearSystem(real[x, x] A, real[x] b, real[x, x] C, real[x] x0);

// Solves Ax=b, given x0 with iterations and tolerance thresholds 
def <x> real[x] solveLinearSystem(real[x, x] A, real[x] b, real[x] x0, int maxIterations , real tolerance);

// Solves C^-1(Ax)=C^-1 b, given x0 with iterations threshold
def <x> real[x] solveLinearSystem(real[x, x] A, real[x] b, real[x, x] C, real[x] x0, int maxIterations );

// Solves C^-1(Ax)=C^-1 b, given x0 with iterations and tolerance thresholds
def <x> real[x] solveLinearSystem(real[x, x] A, real[x] b, real[x, x] C, real[x] x0, int maxIterations , real tolerance);
