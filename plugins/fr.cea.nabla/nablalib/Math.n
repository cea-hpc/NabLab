/*******************************************************************************
 * Copyright (c) 2022 CEA
 * This program and the accompanying materials are made available under the 
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 * Contributors: see AUTHORS file
 *******************************************************************************/
extension Math;

// ***** REDUCTIONS *****
red real sum(0.0) (a, b) : return a + b;
red <x> real[x] sum(0.0) (a, b) : return a + b;
red <x> real[x, x] sum(0.0) (a, b) : return a + b;

red real prod(1.0) (a, b) : return a * b;
red <x> real[x] prod(1.0) (a, b) : return a * b;
red <x> real[x, x] prod(1.0) (a, b) : return a * b;

red real Min(real.MaxValue) (a, b) : return min(a, b);
red real Max(real.MinValue) (a, b) : return max(a, b);

// ***** FUNCTIONS *****
def real abs(real a);
def real min(real a, real b);
def real max(real a, real b);

def real cos(real a);
def real sin(real a);
def real tan(real a);
def real acos(real a);
def real asin(real a);
def real atan(real a);
def real atan2(real a, real b);

def real exp(real a);
def real log(real a);
def real log10(real a);
def real erf(real a);

def real pow(real a, real b);
def real sqrt(real a);

def <x, y> real[x] matVectProduct(real[x,y] a, real[y] b)
{
	real[x] result;
	forall ix in [0;x[,
	{
		real[y] tmp;
		forall iy in [0;y[, tmp[iy] = a[ix, iy];
		result[ix] = dot(tmp, b);
	}
	return result;
}

// scalar product
def <x> real dot(real[x] a, real[x] b)
{
	let real result = 0.0;
	forall i in [0;x[,
		result = result + a[i]*b[i];
	return result;
}

// 2D cross products
def real det(real[2] a, real[2] b) return (a[0]*b[1] - a[1]*b[0]);
def real det(real[2,2] a) return a[0,0] * a[1,1] - a[0,1] * a[1,0];

def <x> real norm(real[x] a) return sqrt(dot(a,a));