/*******************************************************************************
 * Copyright (c) 2022 CEA
 * This program and the accompanying materials are made available under the 
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 * Contributors: see AUTHORS file
 *******************************************************************************/
extension Math;

// ***** REDUCTIONS *****
def sum, 0.0: real, (a, b) → return a + b;
def sum, 0.0: x | real[x], (a, b) → return a + b;
def sum, 0.0: x | real[x, x], (a, b) → return a + b;

def prod, 1.0: real, (a, b) → return a * b;
def prod, 1.0: x | real[x], (a, b) → return a * b;
def prod, 1.0: x | real[x, x], (a, b) → return a * b;

def Min, real.MaxValue: real, (a, b) → return min(a, b);
def Max, real.MinValue: real, (a, b) → return max(a, b);

// ***** FUNCTIONS *****
def abs: real → real;
def min: real × real → real;
def max: real × real → real;

def cos: real → real;
def sin: real → real;
def tan: real → real;
def acos: real → real;
def asin: real → real;
def atan: real → real;
def atan2: real × real → real;

def exp: real → real;
def log: real → real;
def log10: real → real;
def erf: real → real;

def pow: real × real → real;
def sqrt: real → real;

def matVectProduct: x, y  | real[x,y] × real[y] → real[x], (a, b) →
{
	real[x] result;
	∀ ix ∈ [0;x[,
	{
		real[y] tmp;
		∀ iy ∈ [0;y[, tmp[iy] = a[ix, iy];
		result[ix] = dot(tmp, b);
	}
	return result;
}

// scalar product
def dot: x | real[x] × real[x] → real, (a, b) →
{
	let real result = 0.0;
	∀ i ∈ [0;x[,
		result = result + a[i]*b[i];
	return result;
}

// 2D cross products
def det: real[2] × real[2] → real, (a, b) → return (a[0]*b[1] - a[1]*b[0]);
def det: real[2,2] → real, (a) → return a[0,0] * a[1,1] - a[0,1] * a[1,0];

def norm: x | real[x] → real, (a) → return sqrt(dot(a,a));
