/*******************************************************************************
 * Copyright (c) 2021 CEA
 * This program and the accompanying materials are made available under the 
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 * Contributors: see AUTHORS file
 *******************************************************************************/
extension Math;

// ***** REDUCTIONS *****
def ∑, 0.0: ℝ, (a, b) → return a + b;
def ∑, 0.0: x | ℝ[x], (a, b) → return a + b;
def ∑, 0.0: x | ℝ[x, x], (a, b) → return a + b;

def ∏, 1.0: ℝ, (a, b) → return a * b;
def ∏, 1.0: x | ℝ[x], (a, b) → return a * b;
def ∏, 1.0: x | ℝ[x, x], (a, b) → return a * b;

def Min, ℝ.MaxValue: ℝ, (a, b) → return min(a, b);
def Max, ℝ.MinValue: ℝ, (a, b) → return max(a, b);

// ***** FUNCTIONS *****
def abs: ℝ → ℝ;
def min: ℝ × ℝ → ℝ;
def max: ℝ × ℝ → ℝ;

def cos: ℝ → ℝ;
def sin: ℝ → ℝ;
def tan: ℝ → ℝ;
def acos: ℝ → ℝ;
def asin: ℝ → ℝ;
def atan: ℝ → ℝ;
def atan2: ℝ × ℝ → ℝ;

def exp: ℝ → ℝ;
def log: ℝ → ℝ;
def log10: ℝ → ℝ;
def erf: ℝ → ℝ;

def pow: ℝ × ℝ → ℝ;
def √: ℝ → ℝ;

def matVectProduct: x, y  | ℝ[x,y] × ℝ[y] → ℝ[x], (a, b) →
{
	ℝ[x] result;
	∀ ix ∈ [0;x[,
	{
		ℝ[y] tmp;
		∀ iy ∈ [0;y[, tmp[iy] = a[ix, iy];
		result[ix] = dot(tmp, b);
	}
	return result;
}

// scalar product
def dot: x | ℝ[x] × ℝ[x] → ℝ, (a, b) →
{
	let ℝ result = 0.0;
	∀ i ∈ [0;x[,
		result = result + a[i]*b[i];
	return result;
}

// 2D cross products
def det: ℝ[2] × ℝ[2] → ℝ, (a, b) → return (a[0]*b[1] - a[1]*b[0]);
def det: ℝ[2,2] → ℝ, (a) → return a[0,0] * a[1,1] - a[0,1] * a[1,0];

def norm: x | ℝ[x] → ℝ, (a) → return √(dot(a,a));
