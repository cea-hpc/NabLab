/*******************************************************************************
 * Copyright (c) 2022 CEA
 * This program and the accompanying materials are made available under the 
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 * Contributors: see AUTHORS file
 *******************************************************************************/

grammar fr.cea.nabla.Nabla
with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate nabla "http://www.cea.fr/nabla/Nabla"

NablaRoot: NablaExtension | NablaModule;

NablaExtension: DefaultExtension | MeshExtension;

DefaultExtension:
	(linearAlgebra?='linearalgebra')? 'extension' name=QualifiedName ';'
	imports+=Import*
	reductions+=Reduction*
	functions+=Function*;

MeshExtension:
	'mesh' 'extension' name=QualifiedName ';'
	('itemtypes' '{' itemTypes+=ItemType (',' itemTypes+=ItemType)* '}'
	connectivities+=Connectivity*)?;

NablaModule:
	'module' name=QualifiedName ';'
	imports+=Import*
	reductions+=Reduction*
	functions+=Function*
	declarations+=VarDeclaration*
	// Only one block of iteration (don't know how to manage several blocks on node variable X)
	(iteration=TimeIteratorDefinition)?
	jobs+=Job*;

Import: 'with' importedNamespace=QualifiedNameWithWildcard ';';


/* ITEMS & CONNECTIVITES *********************************/
ItemType: name=ID;
Connectivity: 'connectivity' name=ID ':' (inTypes+=[ItemType|QualifiedName] ('\u00D7' inTypes+=[ItemType|QualifiedName])*)? '\u2192' ((multiple?='{' returnType=[ItemType|QualifiedName] '}') | returnType=[ItemType|QualifiedName]) (local ?= 'local')?';';

/* JOBS & INSTRUCTIONS ***********************************/
Job: name=ID ':' instruction=Instruction;
Iterable: Loop | ReductionCall;
VarDeclaration: SimpleVarDeclaration | VarGroupDeclaration;
Instruction: VarDeclaration | InstructionBlock | Loop | Affectation | If | ItemSet | While | Return | Exit;

SimpleVarDeclaration: 'let' type=BaseType variable=SimpleVar '=' value=Expression ';';
VarGroupDeclaration: type=BaseType variables+=Var (',' variables+=Var)* ';';
InstructionBlock: '{' instructions+=Instruction+ '}';
Loop: '\u2200' iterationBlock=IterationBlock ',' body=Instruction;
Affectation: left=ArgOrVarRef '=' right=Expression ';';
If: 'if' '(' condition=Expression ')' then=Instruction (=>'else' else=Instruction)?;
ItemSet: 'set' name=ID '=' value=ConnectivityCall ';';
While: 'while' '(' condition=Expression ')' instruction = Instruction;
Return: 'return' expression=Expression ';';
Exit: 'exit' message=STRING ';';


/* ITERATEURS ********************************************/
IterationBlock: SpaceIterator | Interval;
Container: ItemSetRef | ConnectivityCall;
ItemSetRef: target=[ItemSet];
SpaceIterator: name=ID (',' counter=SimpleVar)? '\u2208' container=Container;
Interval: index=SimpleVar '\u2208' '[' from=INT ';' nbElems=Expression '[';  // from forced to 0 for the moment
ConnectivityCall: connectivity=[Connectivity|QualifiedName] '('(group=STRING | args+=SpaceIteratorRef (',' args+=SpaceIteratorRef)* )?')';
SpaceIteratorRef: target=[SpaceIterator] (('+' inc=INT) | ('-' dec=INT))?;

TimeIteratorDefinition: 'iterate' iterator=AbstractTimeIterator;
AbstractTimeIterator: TimeIterator | TimeIteratorBlock;
TimeIterator: name=ID 'while' '(' condition=Expression ')' (';' | (',' innerIterator=AbstractTimeIterator));
TimeIteratorBlock: '{' iterators+=TimeIterator+ '}';
TimeIteratorRef: CurrentTimeIteratorRef | InitTimeIteratorRef | NextTimeIteratorRef;
CurrentTimeIteratorRef: target=[TimeIterator];
InitTimeIteratorRef: target=[TimeIterator] '=' value=INT;
NextTimeIteratorRef: target=[TimeIterator] '+' value=INT;


/* VARIABLES *********************************************/
ArgOrVar: Arg | Var | TimeIterator;
Var: SimpleVar | ConnectivityVar;
SimpleVar: name=ID;
ConnectivityVar: name=ID '{' supports+=[Connectivity|QualifiedName] (',' supports+=[Connectivity|QualifiedName])* '}';


/* FONCTIONS / REDUCTIONS ********************************/
FunctionOrReduction: Function | Reduction;
Function: 'def' name=ID ':' (variables+=SimpleVar (',' variables+=SimpleVar)* '|')? typeDeclaration=FunctionTypeDeclaration ((',' '(' (inArgs+=Arg (',' inArgs+=Arg)*)? ')' '\u2192' body=Instruction) | external?=';');
Reduction: 'def' name=ID ',' seed=Expression ':' (variables+=SimpleVar (',' variables+=SimpleVar)* '|')? typeDeclaration=ReductionTypeDeclaration ',' '(' inArgs+=Arg ',' inArgs+=Arg ')' '\u2192' body=Instruction;
FunctionTypeDeclaration: (inTypes+=BaseType ('\u00D7' inTypes+=BaseType)*)? '\u2192' returnType=BaseType;
ReductionTypeDeclaration: type=BaseType;
Arg: name=ID;

/* EXPRESSIONS ******************************************/
Expression: ContractedIf;

ContractedIf returns Expression:
	Or ({ContractedIf.condition=current} '?' then=Or ':' else=Or)*;

Or returns Expression: // on garde l'attribut op pour la validation
	And ({Or.left=current} op='||' right=And)*;

And returns Expression: // on garde l'attribut op pour la validation
	Equality ({And.left=current} op='&&' right=Equality)*;

Equality returns Expression:
	Comparison ({Equality.left=current} op=('=='|'!=') right=Comparison)*;

Comparison returns Expression:
	PlusOrMinus ({Comparison.left=current} op=('>='|'<='|'>'|'<') right=PlusOrMinus)*;

PlusOrMinus returns Expression: // on garde l'attribut op pour la validation
	MulOrDiv ( ({Plus.left=current} op='+' | {Minus.left=current} op='-') right=MulOrDiv)*;

MulOrDiv returns Expression:
	Modulo ( ({Mul.left=current} op='*' | {Div.Left=current} op='/') right=Modulo)*;

Modulo returns Expression:
	Primary ({Modulo.left=current} op='%' right=Primary)*;

Primary returns Expression:
	{Parenthesis} '(' expression=Expression ')' | 
	{UnaryMinus} '-' expression=Primary | 
	{Not} '!' expression=Primary | 
	Atomic;

Atomic returns Expression:
	IntConstant |
	{RealConstant} value=REAL |
	{BoolConstant} (value?='true' | 'false') |
	{MinConstant} type=PrimitiveType '.MinValue' |
	{MaxConstant} type=PrimitiveType '.MaxValue'|
	{FunctionCall} function=[Function|QualifiedName] '(' (args+=Expression (',' args+=Expression)*)? ')' | 
	ReductionCall |
	{BaseTypeConstant} type=BaseType '(' value=Expression ')'| // type.sizes.forall[x | x instanceof IntConstant]
	{VectorConstant} '[' values+=Expression (',' values+=Expression)* ']' |
	{Cardinality} 'card' '(' container=Container ')' |
	ArgOrVarRef;

IntConstant: value=INT;
ReductionCall: reduction=[Reduction|QualifiedName] '{' iterationBlock=IterationBlock '}' '(' arg=Expression ')';
ArgOrVarRef: target=[ArgOrVar] 
	('^{' (timeIterators+=NextTimeIteratorRef ',')* timeIterators+=TimeIteratorRef '}')?
	('{' spaceIterators+=SpaceIteratorRef (',' spaceIterators+=SpaceIteratorRef)* '}')? 
	('[' indices+=Expression (',' indices+=Expression)? ']')?;


/* TYPES *************************************************/
enum PrimitiveType: Int='\u2115' | Real='\u211D' | Bool='\u213E';
BaseType: primitive=PrimitiveType ('[' sizes+=Expression (',' sizes+=Expression)* ']')?;


/* DATA TYPE AND TERMINALS *******************************/
QualifiedName: ID ('.' ID)*;
QualifiedNameWithWildcard: QualifiedName '.*'?;

//terminal REAL returns ecore::EDouble: ('0'..'9')+ '.' ('0'..'9')+ ('e'('+'|'-')('0'..'9')+)?;
terminal REAL returns ecore::EDouble: INT '.' (INT (('e'|'E')('+'|'-')INT)?)?;
@Override 
terminal ID: '^'? ('a'..'z'|'A'..'Z'|'\u0391'..'\u03C9'|'\u220F'..'\u221A'|'_') ('a'..'z'|'A'..'Z'|'\u0391'..'\u03C9'|'0'..'9'|'_')*;

