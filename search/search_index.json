{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is NabLab ? Presentation of the project NabLab is a open-source research project led by HPC initiative of the CEA . It aims is to provide a productive development way for exascale HPC technologies, flexible enough to be competitive in terms of performances. It is composed of: a numerical analysis Domain Specific Language (DSL) to improve applied mathematicians productivity throughput and enables new algorithmic developments for the construction of hierarchical and composable high-performance scientific applications. an full-fledged environment to edit, interpret, debug specific numerical-analysis sources and to generate optimized code for various C++ targets. Motivation Addressing the major challenges of software productivity and performance portability is becoming necessary to take advantage of emerging extreme-scale computing architectures. As software development costs will continuously increase to address exascale hardware issues, higher-level programming abstraction will facilitate the path to go. There is a growing demand for new programming environments in order to improve scientific productivity, to facilitate the design and implementation, and to optimize large production codes. How it works NabLab is based on Eclipse Modeling Framework (EMF) . The Nabla DSL is realized with Xtext that allows to offer a rich textual editor with syntax coloring, code completion, quick fixes... The code in the editor has an internal EMF model representation. This representation, close to the language, is transformed into a numerical analysis specific Intermediate Representation (IR) also implemented as an Ecore metamodel. The concepts of the IR facilitate the code generation. Currently Kokkos , Open MP and STL based threads C++ backends are implemented. Publications Fostering metamodels and grammars within a dedicated environment for HPC: the NabLab environment Applying Model-Driven Engineering to High-Performance Computing: Experience Report, Lessons Learned, and Remaining Challenges Licence and copyright This program and the accompanying materials are made available under the terms of the Eclipse Public License v. 2.0 . SPDX-License-Identifier: EPL-2.0. Please refer to the license for details. Written by CEA and Contributors. (C) Copyright 2021, by CEA. All rights reserved. All content is the property of the respective authors or their employers. For more information regarding authorship of content, please consult the listed source code repository logs.","title":"What is NabLab"},{"location":"#what-is-nablab","text":"","title":"What is NabLab ?"},{"location":"#presentation-of-the-project","text":"NabLab is a open-source research project led by HPC initiative of the CEA . It aims is to provide a productive development way for exascale HPC technologies, flexible enough to be competitive in terms of performances. It is composed of: a numerical analysis Domain Specific Language (DSL) to improve applied mathematicians productivity throughput and enables new algorithmic developments for the construction of hierarchical and composable high-performance scientific applications. an full-fledged environment to edit, interpret, debug specific numerical-analysis sources and to generate optimized code for various C++ targets.","title":"Presentation of the project"},{"location":"#motivation","text":"Addressing the major challenges of software productivity and performance portability is becoming necessary to take advantage of emerging extreme-scale computing architectures. As software development costs will continuously increase to address exascale hardware issues, higher-level programming abstraction will facilitate the path to go. There is a growing demand for new programming environments in order to improve scientific productivity, to facilitate the design and implementation, and to optimize large production codes.","title":"Motivation"},{"location":"#how-it-works","text":"NabLab is based on Eclipse Modeling Framework (EMF) . The Nabla DSL is realized with Xtext that allows to offer a rich textual editor with syntax coloring, code completion, quick fixes... The code in the editor has an internal EMF model representation. This representation, close to the language, is transformed into a numerical analysis specific Intermediate Representation (IR) also implemented as an Ecore metamodel. The concepts of the IR facilitate the code generation. Currently Kokkos , Open MP and STL based threads C++ backends are implemented.","title":"How it works"},{"location":"#publications","text":"Fostering metamodels and grammars within a dedicated environment for HPC: the NabLab environment Applying Model-Driven Engineering to High-Performance Computing: Experience Report, Lessons Learned, and Remaining Challenges","title":"Publications"},{"location":"#licence-and-copyright","text":"This program and the accompanying materials are made available under the terms of the Eclipse Public License v. 2.0 . SPDX-License-Identifier: EPL-2.0. Please refer to the license for details. Written by CEA and Contributors. (C) Copyright 2021, by CEA. All rights reserved. All content is the property of the respective authors or their employers. For more information regarding authorship of content, please consult the listed source code repository logs.","title":"Licence and copyright"},{"location":"debug/","text":"Monitoring and debugging Coming soon...","title":"Monitoring and debugging"},{"location":"debug/#monitoring-and-debugging","text":"Coming soon...","title":"Monitoring and debugging"},{"location":"gettingstarted/","text":"Getting started Download and install Prerequisite NabLab requires Java 11 or later to build & run. Do not forget to set the JAVA_HOME variable to the java installation directory and to update your path. Installing NabLab The latest NabLab environment can be downloaded here . Download the file corresponding to your platform, unzip it and lauch the NabLab executable in the root directory. For Mac users, depending on your security configuration, you have to enter the following command to execute NabLab: xattr -d com.apple.quarantine NabLab.app . Installing NabLab debugger NabLab debugger is based on GraalVM and Monilog . It is still under development. The temporary installation process is: Download GraalVM community edition 21.0.0 here and extract it in the directory of your choice. Install Graalpython in following the instructions available here . Note that numpy is a supported package of GraalVM: just replace pandas by numpy in the package installation instructions . For Monilog and GraalVM support of NabLab, download the 3 files available here . To install the NabLab and Monilog languages support for GraalVM, type the following command: /path/to/graalvm/bin/gu -L install -f nabla-component.jar . Then create the folder /path/to/graalvm/tools/monilogger and copy the file monilogger.jar into it. Into your NabLab product, click on the menu Help > Install New Software... , a dialog box appears, clic on Add... > Archive and select the graalvm-integration.zip file. In the root directory of your NabLab installation, add the following option to the NabLab.ini file -vm /path/to/graalvm-ce-java11-21.0.0/bin/java . Build via Maven 3.x If you need to build NabLab products (Windows/Linux/MacOS and Eclipse update-site) from the source code (instead of downloading it), run the following command from the root of the repository: mvn clean; mvn verify . Note the ';' after mvn clean . The products resulting from the build will be accessible in /releng/fr.cea.nabla.updatesite/target/products/NabLab-X.Y.Z.yyyymmddHHMM-YOUR_PLATFORM.zip . The Eclipse update-site resulting from the build will be accessible in /releng/fr.cea.nabla.updatesite/target/fr.cea.nabla.updatesite-X.Y.Z.yyyymmddHHMM.zip . If you want to skip tests execution, you can run the following command: mvn clean; mvn verify -Dmaven.test.skip=true First step in the environment Perspective Once the NabLab environment has been launched, the NabLab perspective should be selected. If it is not the case, just select the NabLab perspective from the Window > Perspective > Open Perspective > Other ... > NabLab menu. The NabLab perspective provides a set of Views and wizards shortcuts allowing to easily create and develop NabLab projects. Examples project Just click on the main menu From the File > New > NabLab Examples to import the examples project: A new wizard is launched: Just click on the Finish button to import the examples project that becomes available in the Model Explorer view on the left of the perspective. It contains a set of examples including Glace2D, HeatEquation, ExplicitHeatEquation, IterativeHeatEquation and ImplicitHeatEquation. Code generation To launch code generation corresponding to the NabLab module, just right-click on the ngen file of the project of your choice, for example NabLabExamples/src/explicitheatequation/ExplicitHeatEquation.ngen and select Generate Code Java and C++ source code files are generated in src-gen-java and src-gen-cpp folders respectively. For each C++ folder a CMakeLists.txt file is generated. A LaTeX file containing the content of the jobs and an example of json data file are also generated in the src-gen folder. LaTeX view The LaTeX View is located on the bottom of the NabLab environment. It allows to visualize in an elegant way the formulas contained in a .n file. If you do not use the NabLab perspective the The LaTeX View is not visible. You can access it through the Window > Show View > Other... > NabLab > LaTeX View main menu. This view is automatically updated and synchronized with the selection in the current NabLab editor. Job graph view The Job Graph View can be opened from a ngen file containing an Application , by clicking on F1. It allows to quickly visualize the data flow graph of the application described in the ngen file. Job graph editor NabLab offers another way of visualizing the data flow graph of an application. The Job Graph Editor can be opened from a ngen file containing an Application , by clicking on F2. It allows to visualize bigger graphs than the Job Graph View thanks to an efficient layout.","title":"Getting started"},{"location":"gettingstarted/#getting-started","text":"","title":"Getting started"},{"location":"gettingstarted/#download-and-install","text":"","title":"Download and install"},{"location":"gettingstarted/#prerequisite","text":"NabLab requires Java 11 or later to build & run. Do not forget to set the JAVA_HOME variable to the java installation directory and to update your path.","title":"Prerequisite"},{"location":"gettingstarted/#installing-nablab","text":"The latest NabLab environment can be downloaded here . Download the file corresponding to your platform, unzip it and lauch the NabLab executable in the root directory. For Mac users, depending on your security configuration, you have to enter the following command to execute NabLab: xattr -d com.apple.quarantine NabLab.app .","title":"Installing NabLab"},{"location":"gettingstarted/#installing-nablab-debugger","text":"NabLab debugger is based on GraalVM and Monilog . It is still under development. The temporary installation process is: Download GraalVM community edition 21.0.0 here and extract it in the directory of your choice. Install Graalpython in following the instructions available here . Note that numpy is a supported package of GraalVM: just replace pandas by numpy in the package installation instructions . For Monilog and GraalVM support of NabLab, download the 3 files available here . To install the NabLab and Monilog languages support for GraalVM, type the following command: /path/to/graalvm/bin/gu -L install -f nabla-component.jar . Then create the folder /path/to/graalvm/tools/monilogger and copy the file monilogger.jar into it. Into your NabLab product, click on the menu Help > Install New Software... , a dialog box appears, clic on Add... > Archive and select the graalvm-integration.zip file. In the root directory of your NabLab installation, add the following option to the NabLab.ini file -vm /path/to/graalvm-ce-java11-21.0.0/bin/java .","title":"Installing NabLab debugger"},{"location":"gettingstarted/#build-via-maven-3x","text":"If you need to build NabLab products (Windows/Linux/MacOS and Eclipse update-site) from the source code (instead of downloading it), run the following command from the root of the repository: mvn clean; mvn verify . Note the ';' after mvn clean . The products resulting from the build will be accessible in /releng/fr.cea.nabla.updatesite/target/products/NabLab-X.Y.Z.yyyymmddHHMM-YOUR_PLATFORM.zip . The Eclipse update-site resulting from the build will be accessible in /releng/fr.cea.nabla.updatesite/target/fr.cea.nabla.updatesite-X.Y.Z.yyyymmddHHMM.zip . If you want to skip tests execution, you can run the following command: mvn clean; mvn verify -Dmaven.test.skip=true","title":"Build via Maven 3.x"},{"location":"gettingstarted/#first-step-in-the-environment","text":"","title":"First step in the environment"},{"location":"gettingstarted/#perspective","text":"Once the NabLab environment has been launched, the NabLab perspective should be selected. If it is not the case, just select the NabLab perspective from the Window > Perspective > Open Perspective > Other ... > NabLab menu. The NabLab perspective provides a set of Views and wizards shortcuts allowing to easily create and develop NabLab projects.","title":"Perspective"},{"location":"gettingstarted/#examples-project","text":"Just click on the main menu From the File > New > NabLab Examples to import the examples project: A new wizard is launched: Just click on the Finish button to import the examples project that becomes available in the Model Explorer view on the left of the perspective. It contains a set of examples including Glace2D, HeatEquation, ExplicitHeatEquation, IterativeHeatEquation and ImplicitHeatEquation.","title":"Examples project"},{"location":"gettingstarted/#code-generation","text":"To launch code generation corresponding to the NabLab module, just right-click on the ngen file of the project of your choice, for example NabLabExamples/src/explicitheatequation/ExplicitHeatEquation.ngen and select Generate Code Java and C++ source code files are generated in src-gen-java and src-gen-cpp folders respectively. For each C++ folder a CMakeLists.txt file is generated. A LaTeX file containing the content of the jobs and an example of json data file are also generated in the src-gen folder.","title":"Code generation"},{"location":"gettingstarted/#latex-view","text":"The LaTeX View is located on the bottom of the NabLab environment. It allows to visualize in an elegant way the formulas contained in a .n file. If you do not use the NabLab perspective the The LaTeX View is not visible. You can access it through the Window > Show View > Other... > NabLab > LaTeX View main menu. This view is automatically updated and synchronized with the selection in the current NabLab editor.","title":"LaTeX view"},{"location":"gettingstarted/#job-graph-view","text":"The Job Graph View can be opened from a ngen file containing an Application , by clicking on F1. It allows to quickly visualize the data flow graph of the application described in the ngen file.","title":"Job graph view"},{"location":"gettingstarted/#job-graph-editor","text":"NabLab offers another way of visualizing the data flow graph of an application. The Job Graph Editor can be opened from a ngen file containing an Application , by clicking on F2. It allows to visualize bigger graphs than the Job Graph View thanks to an efficient layout.","title":"Job graph editor"},{"location":"language/","text":"Language reference Coming soon...","title":"Language reference"},{"location":"language/#language-reference","text":"Coming soon...","title":"Language reference"},{"location":"tuto/","text":"Presentation of the problem The aim of this tutorial is to implement a simple equation of diffusion in NabLab: \\[ \\begin{equation} \\begin{cases} \\partial_t u - div(K \\nabla u) &= f \\text{ in } \\Omega \\\\ (K \\nabla u)n &= g \\text{ on } \\partial \\Omega \\end{cases} \\end{equation} \\] In this tutorial the equation is discretized with a finite volume scheme on a 2D cartesian mesh. A constant approximation of u by cell gives: \\[ \\begin{equation} \\begin{aligned} \\frac{u_M^{n+1} - u_M^n}{\\Delta t} &= f_M + \\frac{1}{V_M}\\int_{M}{div(K \\nabla u^n)} \\\\ &= f_M + \\frac{1}{V_M}\\int_{\\partial M}{div(K \\nabla u^n)} \\nu \\\\ &= f_M + \\frac{1}{V_M}\\sum_{M' \\text{neighbor of } M}{K_{MM'} \\frac{u_{M'}^n - u_{M}^n}{MM'}} \\end{aligned} \\end{equation} \\] with \\[ \\begin{equation} K_{MM'} = K \\text{ on } M \\cap M' \\end{equation} \\] Consequently \\[ \\begin{equation} \\begin{aligned} u_M^{n+1} &= \\Delta t f_M + 1 + \\frac{\\Delta t}{V_M} + \\sum_{M' \\text{ neighbor of } M}{\\frac{K_{MM'}}{MM'}} . u_M^n \\\\ &- \\frac{\\Delta t}{V_M} \\sum_{M' \\text{ neighbor of } M}{\\frac{K_{MM'} u_{M'}^n}{MM'}} \\end{aligned} \\end{equation} \\] Creating the project Just click on the main menu File > New > NabLab Project to create a new project: A new wizard is launched, asking for a project name and a module name: Enter Tutorial as project name and HeatEquation as module name and click on the Finish button to create the new project. The new project is available in the Model Explorer on the left of the window. It contains two files ( HeatEquation.n , and HeatEquation.ngen ) in the Tutorial/src/heatequation/ folder: TO BE CONTINUED","title":"My first application"},{"location":"tuto/#presentation-of-the-problem","text":"The aim of this tutorial is to implement a simple equation of diffusion in NabLab: \\[ \\begin{equation} \\begin{cases} \\partial_t u - div(K \\nabla u) &= f \\text{ in } \\Omega \\\\ (K \\nabla u)n &= g \\text{ on } \\partial \\Omega \\end{cases} \\end{equation} \\] In this tutorial the equation is discretized with a finite volume scheme on a 2D cartesian mesh. A constant approximation of u by cell gives: \\[ \\begin{equation} \\begin{aligned} \\frac{u_M^{n+1} - u_M^n}{\\Delta t} &= f_M + \\frac{1}{V_M}\\int_{M}{div(K \\nabla u^n)} \\\\ &= f_M + \\frac{1}{V_M}\\int_{\\partial M}{div(K \\nabla u^n)} \\nu \\\\ &= f_M + \\frac{1}{V_M}\\sum_{M' \\text{neighbor of } M}{K_{MM'} \\frac{u_{M'}^n - u_{M}^n}{MM'}} \\end{aligned} \\end{equation} \\] with \\[ \\begin{equation} K_{MM'} = K \\text{ on } M \\cap M' \\end{equation} \\] Consequently \\[ \\begin{equation} \\begin{aligned} u_M^{n+1} &= \\Delta t f_M + 1 + \\frac{\\Delta t}{V_M} + \\sum_{M' \\text{ neighbor of } M}{\\frac{K_{MM'}}{MM'}} . u_M^n \\\\ &- \\frac{\\Delta t}{V_M} \\sum_{M' \\text{ neighbor of } M}{\\frac{K_{MM'} u_{M'}^n}{MM'}} \\end{aligned} \\end{equation} \\]","title":"Presentation of the problem"},{"location":"tuto/#creating-the-project","text":"Just click on the main menu File > New > NabLab Project to create a new project: A new wizard is launched, asking for a project name and a module name: Enter Tutorial as project name and HeatEquation as module name and click on the Finish button to create the new project. The new project is available in the Model Explorer on the left of the window. It contains two files ( HeatEquation.n , and HeatEquation.ngen ) in the Tutorial/src/heatequation/ folder: TO BE CONTINUED","title":"Creating the project"}]}