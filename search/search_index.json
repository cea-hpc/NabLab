{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is NabLab ? Presentation of the project NabLab is a open-source research project led by HPC initiative of the CEA . It aims is to provide a productive development way for exascale HPC technologies, flexible enough to be competitive in terms of performances. It is composed of: a numerical analysis Domain Specific Language (DSL) to improve applied mathematicians productivity throughput and enables new algorithmic developments for the construction of hierarchical and composable high-performance scientific applications. an full-fledged environment to edit, interpret, debug specific numerical-analysis sources and to generate optimized code for various C++ targets. Motivation Addressing the major challenges of software productivity and performance portability is becoming necessary to take advantage of emerging extreme-scale computing architectures. As software development costs will continuously increase to address exascale hardware issues, higher-level programming abstraction will facilitate the path to go. There is a growing demand for new programming environments in order to improve scientific productivity, to facilitate the design and implementation, and to optimize large production codes. How it works NabLab is based on Eclipse Modeling Framework (EMF) . The Nabla DSL is realized with Xtext that allows to offer a rich textual editor with syntax coloring, code completion, quick fixes... The code in the editor has an internal EMF model representation. This representation, close to the language, is transformed into a numerical analysis specific Intermediate Representation (IR) also implemented as an Ecore metamodel. The concepts of the IR facilitate the code generation. Currently Kokkos , Open MP and STL based threads C++ backends are implemented. Publications Fostering metamodels and grammars within a dedicated environment for HPC: the NabLab environment Applying Model-Driven Engineering to High-Performance Computing: Experience Report, Lessons Learned, and Remaining Challenges Licence and copyright This program and the accompanying materials are made available under the terms of the Eclipse Public License v. 2.0 which is available at https://www.eclipse.org/legal/epl-v20.html . SPDX-License-Identifier: EPL-2.0 Please refer to the license for details.","title":"What is NabLab"},{"location":"#what-is-nablab","text":"","title":"What is NabLab ?"},{"location":"#presentation-of-the-project","text":"NabLab is a open-source research project led by HPC initiative of the CEA . It aims is to provide a productive development way for exascale HPC technologies, flexible enough to be competitive in terms of performances. It is composed of: a numerical analysis Domain Specific Language (DSL) to improve applied mathematicians productivity throughput and enables new algorithmic developments for the construction of hierarchical and composable high-performance scientific applications. an full-fledged environment to edit, interpret, debug specific numerical-analysis sources and to generate optimized code for various C++ targets.","title":"Presentation of the project"},{"location":"#motivation","text":"Addressing the major challenges of software productivity and performance portability is becoming necessary to take advantage of emerging extreme-scale computing architectures. As software development costs will continuously increase to address exascale hardware issues, higher-level programming abstraction will facilitate the path to go. There is a growing demand for new programming environments in order to improve scientific productivity, to facilitate the design and implementation, and to optimize large production codes.","title":"Motivation"},{"location":"#how-it-works","text":"NabLab is based on Eclipse Modeling Framework (EMF) . The Nabla DSL is realized with Xtext that allows to offer a rich textual editor with syntax coloring, code completion, quick fixes... The code in the editor has an internal EMF model representation. This representation, close to the language, is transformed into a numerical analysis specific Intermediate Representation (IR) also implemented as an Ecore metamodel. The concepts of the IR facilitate the code generation. Currently Kokkos , Open MP and STL based threads C++ backends are implemented.","title":"How it works"},{"location":"#publications","text":"Fostering metamodels and grammars within a dedicated environment for HPC: the NabLab environment Applying Model-Driven Engineering to High-Performance Computing: Experience Report, Lessons Learned, and Remaining Challenges","title":"Publications"},{"location":"#licence-and-copyright","text":"This program and the accompanying materials are made available under the terms of the Eclipse Public License v. 2.0 which is available at https://www.eclipse.org/legal/epl-v20.html . SPDX-License-Identifier: EPL-2.0 Please refer to the license for details.","title":"Licence and copyright"},{"location":"debug/","text":"Coming soon...","title":"Monitoring and Debugging"},{"location":"install/","text":"Installing NabLab To download and install the NabLab environment, please refer to the \"Getting Started\" section of the readme file on the NabLab GitHub. Installing NabLab debugger NabLab debugger is based on GraalVM and Monilog . It is still under development. The temporary installation process is: Download GraalVM community edition 21.0.0 here and extract it in the directory of your choice. Install Graalpython in following the instructions available here . Note that numpy is a supported package of GraalVM: just replace 'pandas' by 'numpy' in the package installation instructions . For Monilog and GraalVM support of NabLab, download the 3 files available here . To install the NabLab and Monilog languages support for GraalVM, type the following command: /path/to/graalvm/bin/gu -L install -f nabla-component.jar . Then create the folder /path/to/graalvm/tools/monilogger and copy the file nabla-component.jar into it.","title":"Installation"},{"location":"install/#installing-nablab","text":"To download and install the NabLab environment, please refer to the \"Getting Started\" section of the readme file on the NabLab GitHub.","title":"Installing NabLab"},{"location":"install/#installing-nablab-debugger","text":"NabLab debugger is based on GraalVM and Monilog . It is still under development. The temporary installation process is: Download GraalVM community edition 21.0.0 here and extract it in the directory of your choice. Install Graalpython in following the instructions available here . Note that numpy is a supported package of GraalVM: just replace 'pandas' by 'numpy' in the package installation instructions . For Monilog and GraalVM support of NabLab, download the 3 files available here . To install the NabLab and Monilog languages support for GraalVM, type the following command: /path/to/graalvm/bin/gu -L install -f nabla-component.jar . Then create the folder /path/to/graalvm/tools/monilogger and copy the file nabla-component.jar into it.","title":"Installing NabLab debugger"},{"location":"language/","text":"Coming soon...","title":"Language Reference"},{"location":"tuto/","text":"Coming soon...","title":"My first application"}]}