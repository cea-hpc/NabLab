/* DO NOT EDIT THIS FILE - it is machine generated */

package depthinit;

import java.io.FileReader;
import java.io.IOException;
import java.util.stream.IntStream;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonElement;

import fr.cea.nabla.javalib.mesh.*;

public final class DepthInit
{
	// Mesh and mesh variables
	private final CartesianMesh2D mesh;
	@SuppressWarnings("unused")
	private final int nbNodes, nbCells;

	// Options and global variables
	private bathylibjava.BathyLib bathyLib;
	static final double t = 0.0;
	int maxIter;
	double maxTime;
	double deltat;
	double[][] X;
	double[] eta;

	public DepthInit(CartesianMesh2D aMesh)
	{
		// Mesh and mesh variables initialization
		mesh = aMesh;
		nbNodes = mesh.getNbNodes();
		nbCells = mesh.getNbCells();
	}

	public void jsonInit(final String jsonContent)
	{
		final Gson gson = new Gson();
		final JsonObject options = gson.fromJson(jsonContent, JsonObject.class);
		assert(options.has("maxIter"));
		final JsonElement valueof_maxIter = options.get("maxIter");
		assert(valueof_maxIter.isJsonPrimitive());
		maxIter = valueof_maxIter.getAsJsonPrimitive().getAsInt();
		assert(options.has("maxTime"));
		final JsonElement valueof_maxTime = options.get("maxTime");
		assert(valueof_maxTime.isJsonPrimitive());
		maxTime = valueof_maxTime.getAsJsonPrimitive().getAsDouble();
		assert(options.has("deltat"));
		final JsonElement valueof_deltat = options.get("deltat");
		assert(valueof_deltat.isJsonPrimitive());
		deltat = valueof_deltat.getAsJsonPrimitive().getAsDouble();
		X = new double[nbNodes][2];
		eta = new double[nbCells];
		// bathyLib
		bathyLib = new bathylibjava.BathyLib();
		if (options.has("bathyLib"))
			bathyLib.jsonInit(options.get("bathyLib").toString());

		// Copy node coordinates
		double[][] gNodes = mesh.getGeometry().getNodes();
		IntStream.range(0, nbNodes).parallel().forEach(rNodes ->
		{
			X[rNodes][0] = gNodes[rNodes][0];
			X[rNodes][1] = gNodes[rNodes][1];
		});
	}

	/**
	 * Job initFromFile called @1.0 in simulate method.
	 * In variables: 
	 * Out variables: eta
	 */
	protected void initFromFile()
	{
		for (int jCells=0; jCells<nbCells; jCells++)
		{
			eta[jCells] = two() * bathyLib.nextWaveHeight();
		}
	}

	private static double two()
	{
		return 2.0;
	}

	public void simulate()
	{
		System.out.println("Start execution of depthInit");
		initFromFile(); // @1.0
		System.out.println("End of execution of depthInit");
	}

	public static void main(String[] args) throws IOException
	{
		if (args.length == 1)
		{
			final String dataFileName = args[0];
			final Gson gson = new Gson();
			final JsonObject o = gson.fromJson(new FileReader(dataFileName), JsonObject.class);

			// Mesh instanciation
			assert(o.has("mesh"));
			CartesianMesh2D mesh = new CartesianMesh2D();
			mesh.jsonInit(o.get("mesh").toString());

			// Module instanciation(s)
			DepthInit depthInit = new DepthInit(mesh);
			if (o.has("depthInit")) depthInit.jsonInit(o.get("depthInit").toString());

			// Start simulation
			depthInit.simulate();
		}
		else
		{
			System.err.println("[ERROR] Wrong number of arguments: expected 1, actual " + args.length);
			System.err.println("        Expecting user data file name, for example DepthInit.json");
			System.exit(1);
		}
	}
};
