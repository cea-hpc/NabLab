/* DO NOT EDIT THIS FILE - it is machine generated */

package reduction;

import java.io.FileReader;
import java.io.IOException;
import java.util.stream.IntStream;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonElement;

import fr.cea.nabla.javalib.mesh.*;

public final class Reduction
{
	// Mesh and mesh variables
	private final CartesianMesh2D mesh;
	private final int nbNodes;
	private final int nbCells;
	private final int nbTopLeftNode;
	// Options and global variables
	int n;
	static final double maxTime = 0.1;
	static final int maxIter = 500;
	static final double deltat = 0.01;
	double t_n;
	double t_nplus1;
	double[][] X;
	double[][] Vnode_n;
	double[][] Vnode_nplus1;
	double[][][] lpc_n;

	public Reduction(CartesianMesh2D aMesh)
	{
		// Mesh and mesh variables initialization
		mesh = aMesh;
		nbNodes = mesh.getNbNodes();
		nbCells = mesh.getNbCells();
		nbTopLeftNode = mesh.getGroup("TopLeftNode").length;
	}

	public void jsonInit(final String jsonContent)
	{
		final Gson gson = new Gson();
		final JsonObject options = gson.fromJson(jsonContent, JsonObject.class);
		n = 0;
		X = new double[nbNodes][2];
		Vnode_n = new double[nbNodes][2];
		Vnode_nplus1 = new double[nbNodes][2];
		lpc_n = new double[nbNodes][4][2];

		// Copy node coordinates
		double[][] gNodes = mesh.getGeometry().getNodes();
		IntStream.range(0, nbNodes).parallel().forEach(rNodes ->
		{
			X[rNodes][0] = gNodes[rNodes][0];
			X[rNodes][1] = gNodes[rNodes][1];
		});
	}

	/**
	 * Job computeGeometry called @1.0 in simulate method.
	 * In variables: 
	 * Out variables: lpc_n
	 */
	protected void computeGeometry()
	{
		IntStream.range(0, nbCells).parallel().forEach(cCells -> 
		{
			final int cId = cCells;
			{
				final int[] nodesOfCellC = mesh.getNodesOfCell(cId);
				final int nbNodesOfCellC = nodesOfCellC.length;
				for (int pNodesOfCellC=0; pNodesOfCellC<nbNodesOfCellC; pNodesOfCellC++)
				{
					final int pId = nodesOfCellC[pNodesOfCellC];
					final int pNodes = pId;
					final int cCellsOfNodeP = Utils.indexOf(mesh.getCellsOfNode(pId), cId);
					lpc_n[pNodes][cCellsOfNodeP] = new double[] {1.0, 1.0};
				}
			}
		});
	}

	/**
	 * Job executeTimeLoopN called @1.0 in simulate method.
	 * In variables: Vnode_n, n, t_n
	 * Out variables: Vnode_nplus1, t_nplus1
	 */
	protected void executeTimeLoopN()
	{
		n = 0;
		boolean continueLoop = true;
		do
		{
			n++;
			System.out.printf("START ITERATION n: %5d - t: %5.5f - deltat: %5.5f\n", n, t_n, deltat);
		
		
			// Evaluate loop condition with variables at time n
			continueLoop = (n <= 2);
		
			t_n = t_nplus1;
			IntStream.range(0, nbNodes).parallel().forEach(i1Nodes -> 
			{
				for (int i1=0; i1<2; i1++)
				{
					Vnode_n[i1Nodes][i1] = Vnode_nplus1[i1Nodes][i1];
				}
			});
		} while (continueLoop);
		
		System.out.printf("FINAL TIME: %5.5f - deltat: %5.5f\n", t_n, deltat);
	}

	/**
	 * Job updateTime called @1.0 in simulate method.
	 * In variables: deltat, t_n
	 * Out variables: t_nplus1
	 */
	protected void updateTime()
	{
		t_nplus1 = t_n + deltat;
	}

	/**
	 * Job computeBoundaryNodeVelocities called @2.0 in simulate method.
	 * In variables: lpc_n
	 * Out variables: Vnode_nplus1
	 */
	protected void computeBoundaryNodeVelocities()
	{
		{
			final int[] topLeftNode = mesh.getGroup("TopLeftNode");
			IntStream.range(0, nbTopLeftNode).parallel().forEach(pTopLeftNode -> 
			{
				final int pId = topLeftNode[pTopLeftNode];
				final int pNodes = pId;
				double[] reduction0 = new double[] {0.0, 0.0};
				{
					final int[] cellsOfNodeP = mesh.getCellsOfNode(pId);
					final int nbCellsOfNodeP = cellsOfNodeP.length;
					for (int cCellsOfNodeP=0; cCellsOfNodeP<nbCellsOfNodeP; cCellsOfNodeP++)
					{
						reduction0 = sumR1(reduction0, lpc_n[pNodes][cCellsOfNodeP]);
					}
				}
				Vnode_nplus1[pNodes] = nodeVelocityBoundaryConditionCorner(1, new double[] {0.0, 0.0}, 1, new double[] {0.0, 0.0}, new double[][] {new double[] {1.0, 1.0}, new double[] {1.0, 1.0}}, new double[] {1.0, 1.0}, reduction0);
			});
		}
	}

	private static double[] nodeVelocityBoundaryConditionCorner(int BC1, double[] BCValue1, int BC2, double[] BCValue2, double[][] Mp, double[] Gp, double[] lp_np)
	{
		return new double[] {0.0, 0.0};
	}

	private static double[] sumR1(double[] a, double[] b)
	{
		return operatorAdd(a, b);
	}

	private static double[] operatorAdd(double[] a, double[] b)
	{
		double[] result = new double[a.length];
		for (int ix0=0; ix0<a.length; ix0++)
		{
			result[ix0] = a[ix0] + b[ix0];
		}
		return result;
	}

	public void simulate()
	{
		System.out.println("Start execution of reduction");
		computeGeometry(); // @1.0
		executeTimeLoopN(); // @1.0
		updateTime(); // @1.0
		computeBoundaryNodeVelocities(); // @2.0
		System.out.println("End of execution of reduction");
	}

	public static void main(String[] args) throws IOException
	{
		if (args.length == 1)
		{
			final String dataFileName = args[0];
			final Gson gson = new Gson();
			final JsonObject o = gson.fromJson(new FileReader(dataFileName), JsonObject.class);

			// Mesh instanciation
			assert(o.has("mesh"));
			CartesianMesh2D mesh = new CartesianMesh2D();
			mesh.jsonInit(o.get("mesh").toString());

			// Module instanciation(s)
			Reduction reduction = new Reduction(mesh);
			assert(o.has("reduction"));
			reduction.jsonInit(o.get("reduction").toString());

			// Start simulation
			reduction.simulate();
		}
		else
		{
			System.err.println("[ERROR] Wrong number of arguments: expected 1, actual " + args.length);
			System.err.println("        Expecting user data file name, for example Reduction.json");
			System.exit(1);
		}
	}
};
