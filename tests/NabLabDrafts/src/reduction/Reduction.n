/*******************************************************************************
 * Copyright (c) 2022 CEA
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 * Contributors: see AUTHORS file
 *******************************************************************************/
module Reduction;

with Math.*;

with CartesianMesh2D.*;

def real[2] nodeVelocityBoundaryConditionCorner(int BC1, real[2] BCValue1, int BC2, real[2] BCValue2, real[2,2] Mp, real[2] Gp, real[2] lp_np) {
	return [0., 0.];
}

// Simulation options
let real maxTime = 0.1;
let int maxIter = 500;
let real delta_t = 0.01;

real t;
real[2] X{nodes};
real[2] Vnode{nodes};
real[2] lpc_n{nodes, cellsOfNode}; // Corner normal --> "lpc npc" 

iterate n while (n <= 2);

ComputeGeometry: forall c in cells(), forall p in nodesOfCell(c), lpc_n{p,c}  = [1.0, 1.0];

ComputeBoundaryNodeVelocities: forall p in nodes("TopLeftNode"), Vnode^{n+1}{p} = nodeVelocityBoundaryConditionCorner(1, [0., 0.], 1, [0., 0.], [[1., 1.],[1., 1.]], [1., 1.], sum{c in cellsOfNode(p)}(lpc_n{p,c}));

UpdateTime: t^{n+1} = t^{n}+delta_t;
