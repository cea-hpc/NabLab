/* DO NOT EDIT THIS FILE - it is machine generated */

#include "HydroModule.h"
#include <arcane/Concurrency.h>
#include <arcane/ITimeLoopMng.h>

using namespace Arcane;

/*** Free functions **********************************************************/

namespace hydrofreefuncs
{
	const bool assertEquals(const Real expected, const Real actual)
	{
		const bool ret((expected == actual));
		if (!ret) 
			ARCANE_FATAL("** Assertion failed");
		return ret;
	}
}

/*** Module/Service **********************************************************/

HydroModule::HydroModule(const ModuleBuildInfo& bi)
: ArcaneHydroObject(bi)
, m_default_queue(subDomain()->acceleratorMng()->defaultQueue())
{}

void HydroModule::init()
{
	// initialization of mesh attributes
	m_mesh = CartesianMesh2D::createInstance(mesh());

	// initialization of other attributes

	// constant time step
	m_global_deltat = options()->deltat();

	// calling jobs
	iniHv1(); // @1.0
	iniHv2(); // @1.0
	hj1(); // @2.0
	oracleHv1(); // @2.0
	oracleHv2(); // @2.0
	options()->r1()->rj1(); // @2.0
	hj2(); // @3.0
	oracleHv3(); // @3.0
	oracleHv4(); // @3.0
	options()->r2()->rj1(); // @3.0
	options()->r1()->rj2(); // @3.0
	oracleHv5(); // @4.0
	options()->r2()->rj2(); // @4.0
	hj3(); // @5.0
	oracleHv6(); // @5.0
	oracleHv7(); // @6.0

	// No compute loop entry point: end of computation triggered to avoid infinite loop in tests
	subDomain()->timeLoopMng()->stopComputeLoop(true);
}

/**
 * Job iniHv1 called @1.0 in simulate method.
 * In variables: 
 * Out variables: hv1
 */
void HydroModule::iniHv1()
{
	auto command = makeCommand(m_default_queue);
	auto out_hv1 = ax::viewOut(command, m_hv1);
	command << RUNCOMMAND_ENUMERATE(Cell, cCells, allCells())
	{
		out_hv1[cCells] = 2.0;
	};
}

/**
 * Job iniHv2 called @1.0 in simulate method.
 * In variables: 
 * Out variables: hv2
 */
void HydroModule::iniHv2()
{
	auto command = makeCommand(m_default_queue);
	auto out_hv2 = ax::viewOut(command, m_hv2);
	command << RUNCOMMAND_ENUMERATE(Cell, cCells, allCells())
	{
		out_hv2[cCells] = 0.0;
	};
}

/**
 * Job hj1 called @2.0 in simulate method.
 * In variables: hv2
 * Out variables: hv3
 */
void HydroModule::hj1()
{
	auto command = makeCommand(m_default_queue);
	auto in_hv2 = ax::viewIn(command, m_hv2);
	auto out_hv3 = ax::viewOut(command, m_hv3);
	command << RUNCOMMAND_ENUMERATE(Cell, cCells, allCells())
	{
		out_hv3[cCells] = in_hv2[cCells] + 1.0;
	};
}

/**
 * Job oracleHv1 called @2.0 in simulate method.
 * In variables: hv1
 * Out variables: 
 */
void HydroModule::oracleHv1()
{
	auto command = makeCommand(m_default_queue);
	auto in_hv1 = ax::viewIn(command, m_hv1);
	command << RUNCOMMAND_ENUMERATE(Cell, cCells, allCells())
	{
		const bool testHv1(hydrofreefuncs::assertEquals(2.0, in_hv1[cCells]));
	};
}

/**
 * Job oracleHv2 called @2.0 in simulate method.
 * In variables: hv2
 * Out variables: 
 */
void HydroModule::oracleHv2()
{
	auto command = makeCommand(m_default_queue);
	auto in_hv2 = ax::viewIn(command, m_hv2);
	command << RUNCOMMAND_ENUMERATE(Cell, cCells, allCells())
	{
		const bool testHv2(hydrofreefuncs::assertEquals(0.0, in_hv2[cCells]));
	};
}

/**
 * Job hj2 called @3.0 in simulate method.
 * In variables: hv3
 * Out variables: hv5
 */
void HydroModule::hj2()
{
	auto command = makeCommand(m_default_queue);
	auto in_hv3 = ax::viewIn(command, m_hv3);
	auto out_hv5 = ax::viewOut(command, m_hv5);
	command << RUNCOMMAND_ENUMERATE(Cell, cCells, allCells())
	{
		out_hv5[cCells] = in_hv3[cCells] + 2.0;
	};
}

/**
 * Job oracleHv3 called @3.0 in simulate method.
 * In variables: hv3
 * Out variables: 
 */
void HydroModule::oracleHv3()
{
	auto command = makeCommand(m_default_queue);
	auto in_hv3 = ax::viewIn(command, m_hv3);
	command << RUNCOMMAND_ENUMERATE(Cell, cCells, allCells())
	{
		const bool testHv3(hydrofreefuncs::assertEquals(1.0, in_hv3[cCells]));
	};
}

/**
 * Job oracleHv4 called @3.0 in simulate method.
 * In variables: hv4
 * Out variables: 
 */
void HydroModule::oracleHv4()
{
	auto command = makeCommand(m_default_queue);
	auto in_hv4 = ax::viewIn(command, m_hv4);
	command << RUNCOMMAND_ENUMERATE(Cell, cCells, allCells())
	{
		const bool testHv4(hydrofreefuncs::assertEquals(4.0, in_hv4[cCells]));
	};
}

/**
 * Job oracleHv5 called @4.0 in simulate method.
 * In variables: hv5
 * Out variables: 
 */
void HydroModule::oracleHv5()
{
	auto command = makeCommand(m_default_queue);
	auto in_hv5 = ax::viewIn(command, m_hv5);
	command << RUNCOMMAND_ENUMERATE(Cell, cCells, allCells())
	{
		const bool testHv5(hydrofreefuncs::assertEquals(3.0, in_hv5[cCells]));
	};
}

/**
 * Job hj3 called @5.0 in simulate method.
 * In variables: hv4, hv5, hv6
 * Out variables: hv7
 */
void HydroModule::hj3()
{
	auto command = makeCommand(m_default_queue);
	auto in_hv4 = ax::viewIn(command, m_hv4);
	auto in_hv5 = ax::viewIn(command, m_hv5);
	auto in_hv6 = ax::viewIn(command, m_hv6);
	auto out_hv7 = ax::viewOut(command, m_hv7);
	command << RUNCOMMAND_ENUMERATE(Cell, cCells, allCells())
	{
		out_hv7[cCells] = in_hv4[cCells] + in_hv5[cCells] + in_hv6[cCells];
	};
}

/**
 * Job oracleHv6 called @5.0 in simulate method.
 * In variables: hv6
 * Out variables: 
 */
void HydroModule::oracleHv6()
{
	auto command = makeCommand(m_default_queue);
	auto in_hv6 = ax::viewIn(command, m_hv6);
	command << RUNCOMMAND_ENUMERATE(Cell, cCells, allCells())
	{
		const bool testHv6(hydrofreefuncs::assertEquals(6.0, in_hv6[cCells]));
	};
}

/**
 * Job oracleHv7 called @6.0 in simulate method.
 * In variables: hv7
 * Out variables: 
 */
void HydroModule::oracleHv7()
{
	auto command = makeCommand(m_default_queue);
	auto in_hv7 = ax::viewIn(command, m_hv7);
	command << RUNCOMMAND_ENUMERATE(Cell, cCells, allCells())
	{
		const bool testHv7(hydrofreefuncs::assertEquals(13.0, in_hv7[cCells]));
	};
}

ARCANE_REGISTER_MODULE_HYDRO(HydroModule);
