/* DO NOT EDIT THIS FILE - it is machine generated */

#ifndef __HYDROMODULE_H_
#define __HYDROMODULE_H_

#include <arcane/utils/Array.h>
#include <arcane/datatype/RealArrayVariant.h>
#include <arcane/datatype/RealArray2Variant.h>
#include "IRemap.h"
#include "IRemap.h"
#include "Hydro_axl.h"
#include "CartesianMesh2D.h"

using namespace Arcane;

/*** Free functions **********************************************************/

namespace hydrofreefuncs
{
	const bool assertEquals(const Real expected, const Real actual);
}

/*** Module/Service **********************************************************/

class HydroModule
: public ArcaneHydroObject
{
public:
	HydroModule(const ModuleBuildInfo& mbi);
	~HydroModule() {}

	// entry points
	virtual void init() override;

	VersionInfo versionInfo() const override { return VersionInfo(1, 0, 0); }

public:
	// jobs
	virtual void iniHv1();
	virtual void iniHv2();
	virtual void hj1();
	virtual void oracleHv1();
	virtual void oracleHv2();
	virtual void hj2();
	virtual void oracleHv3();
	virtual void oracleHv4();
	virtual void oracleHv5();
	virtual void hj3();
	virtual void oracleHv6();
	virtual void oracleHv7();

private:
	// mesh attributes
	CartesianMesh2D* m_mesh;

	// other attributes
	static constexpr Real m_t = 0.0;
};

#endif
