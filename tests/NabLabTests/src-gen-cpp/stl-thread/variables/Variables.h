/* DO NOT EDIT THIS FILE - it is machine generated */

#ifndef __VARIABLES_H_
#define __VARIABLES_H_

#include <fstream>
#include <iomanip>
#include <type_traits>
#include <limits>
#include <utility>
#include <cmath>
#include <rapidjson/document.h>
#include "nablalib/utils/Utils.h"
#include "nablalib/utils/Timer.h"
#include "nablalib/types/Types.h"
#include "nablalib/utils/stl/Parallel.h"
#include "CartesianMesh2D.h"

using namespace nablalib::utils;
using namespace nablalib::types;
using namespace nablalib::utils::stl;

/******************** Free functions declarations ********************/

namespace variablesfreefuncs
{
bool assertEquals(int expected, int actual);
template<size_t x>
bool assertEquals(RealArray1D<x> expected, RealArray1D<x> actual);
template<size_t x>
bool assertEquals(IntArray1D<x> expected, IntArray1D<x> actual);
}

/******************** Module declaration ********************/

class Variables
{
public:
	Variables(CartesianMesh2D& aMesh);
	~Variables();

	void jsonInit(const char* jsonContent);

	void simulate();
	void initDynamicDim() noexcept;
	void initVarVec() noexcept;
	void init_mandatoryOptDim() noexcept;
	void init_mandatoryOptVect() noexcept;
	void init_optDim() noexcept;
	void init_optVect1() noexcept;
	void init_optVect2() noexcept;
	void init_varVec() noexcept;
	void init_dynamicVec() noexcept;
	void testJob() noexcept;

private:
	// Json block of options
	rapidjson::Document jsonDocument;

	// Mesh and mesh variables
	CartesianMesh2D& mesh;
	size_t nbNodes;

	// Options and global variables
	static constexpr double maxTime = 0.1;
	static constexpr int maxIter = 500;
	static constexpr double deltat = 1.0;
	std::vector<RealArray1D<2>> X;
	double t;
	int optDim;
	RealArray1D<2> optVect1;
	RealArray1D<2> optVect2;
	int mandatoryOptDim;
	IntArray1D<2> mandatoryOptVect;
	static constexpr int constexprDim = 2;
	static constexpr RealArray1D<constexprDim> constexprVec = {1.1, 1.1};
	RealArray1D<constexprDim> varVec;
	int dynamicDim;
	RealArray1D<0> dynamicVec;

	// Timers
	Timer globalTimer;
	Timer cpuTimer;
	Timer ioTimer;
};

#endif
