/* DO NOT EDIT THIS FILE - it is machine generated */

package hydroremap;

import java.io.FileReader;
import java.io.IOException;
import java.util.stream.IntStream;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonElement;

import fr.cea.nabla.javalib.*;
import fr.cea.nabla.javalib.mesh.*;

public final class Hydro
{
	// Mesh and mesh variables
	private final CartesianMesh2D mesh;
	@SuppressWarnings("unused")
	private final int nbNodes, nbCells;

	// Additional modules
	protected R1 r1;
	protected R2 r2;

	// Option and global variables
	double maxTime;
	int maxIter;
	double deltat;
	final double t;
	double[][] X;
	double[] hv1;
	double[] hv2;
	double[] hv3;
	double[] hv4;
	double[] hv5;
	double[] hv6;
	double[] hv7;

	public Hydro(CartesianMesh2D aMesh)
	{
		// Mesh and mesh variables initialization
		mesh = aMesh;
		nbNodes = mesh.getNbNodes();
		nbCells = mesh.getNbCells();

		// Initialize variables with default values
		t = 0.0;

		// Allocate arrays
		X = new double[nbNodes][2];
		hv1 = new double[nbCells];
		hv2 = new double[nbCells];
		hv3 = new double[nbCells];
		hv4 = new double[nbCells];
		hv5 = new double[nbCells];
		hv6 = new double[nbCells];
		hv7 = new double[nbCells];

		// Copy node coordinates
		double[][] gNodes = mesh.getGeometry().getNodes();
		IntStream.range(0, nbNodes).parallel().forEach(rNodes ->
		{
			X[rNodes][0] = gNodes[rNodes][0];
			X[rNodes][1] = gNodes[rNodes][1];
		});
	}

	public void jsonInit(final String jsonContent)
	{
		final Gson gson = new Gson();
		final JsonObject o = gson.fromJson(jsonContent, JsonObject.class);
		// maxTime
		if (o.has("maxTime"))
		{
			final JsonElement valueof_maxTime = o.get("maxTime");
			assert(valueof_maxTime.isJsonPrimitive());
			maxTime = valueof_maxTime.getAsJsonPrimitive().getAsDouble();
		}
		else
			maxTime = 0.1;
		// maxIter
		if (o.has("maxIter"))
		{
			final JsonElement valueof_maxIter = o.get("maxIter");
			assert(valueof_maxIter.isJsonPrimitive());
			maxIter = valueof_maxIter.getAsJsonPrimitive().getAsInt();
		}
		else
			maxIter = 500;
		// deltat
		if (o.has("deltat"))
		{
			final JsonElement valueof_deltat = o.get("deltat");
			assert(valueof_deltat.isJsonPrimitive());
			deltat = valueof_deltat.getAsJsonPrimitive().getAsDouble();
		}
		else
			deltat = 1.0;
	}

	/**
	 * Job hj1 called @1.0 in simulate method.
	 * In variables: hv2
	 * Out variables: hv3
	 */
	protected void hj1()
	{
		IntStream.range(0, nbCells).parallel().forEach(cCells -> 
		{
			hv3[cCells] = hv2[cCells];
		});
	}

	/**
	 * Job hj2 called @2.0 in simulate method.
	 * In variables: hv3
	 * Out variables: hv5
	 */
	protected void hj2()
	{
		IntStream.range(0, nbCells).parallel().forEach(cCells -> 
		{
			hv5[cCells] = hv3[cCells];
		});
	}

	/**
	 * Job hj3 called @4.0 in simulate method.
	 * In variables: hv4, hv5, hv6
	 * Out variables: hv7
	 */
	protected void hj3()
	{
		IntStream.range(0, nbCells).parallel().forEach(cCells -> 
		{
			hv7[cCells] = hv4[cCells] + hv5[cCells] + hv6[cCells];
		});
	}

	public void simulate()
	{
		System.out.println("Start execution of hydro");
		hj1(); // @1.0
		r1.rj1(); // @1.0
		hj2(); // @2.0
		r2.rj1(); // @2.0
		r1.rj2(); // @2.0
		r2.rj2(); // @3.0
		hj3(); // @4.0
		System.out.println("End of execution of hydro");
	}

	public static void main(String[] args) throws IOException
	{
		if (args.length == 1)
		{
			final String dataFileName = args[0];
			final Gson gson = new Gson();
			final JsonObject o = gson.fromJson(new FileReader(dataFileName), JsonObject.class);

			// Mesh instanciation
			assert(o.has("mesh"));
			CartesianMesh2D mesh = new CartesianMesh2D();
			mesh.jsonInit(o.get("mesh").toString());

			// Module instanciation(s)
			Hydro hydro = new Hydro(mesh);
			if (o.has("hydro")) hydro.jsonInit(o.get("hydro").toString());
			R1 r1 = new R1(mesh);
			if (o.has("r1")) r1.jsonInit(o.get("r1").toString());
			r1.setMainModule(hydro);
			R2 r2 = new R2(mesh);
			if (o.has("r2")) r2.jsonInit(o.get("r2").toString());
			r2.setMainModule(hydro);

			// Start simulation
			hydro.simulate();
		}
		else
		{
			System.err.println("[ERROR] Wrong number of arguments: expected 1, actual " + args.length);
			System.err.println("        Expecting user data file name, for example HydroRemap.json");
			System.exit(1);
		}
	}
};
