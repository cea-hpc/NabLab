/* DO NOT EDIT THIS FILE - it is machine generated */

package variables;

import java.io.FileReader;
import java.io.IOException;
import java.util.stream.IntStream;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonElement;

import fr.cea.nabla.javalib.*;
import fr.cea.nabla.javalib.mesh.*;

public final class Variables
{
	// Json block of options
	private JsonObject options;

	// Mesh and mesh variables
	private final CartesianMesh2D mesh;
	@SuppressWarnings("unused")
	private final int nbNodes;

	// Options and global variables
	static final double maxTime = 0.1;
	static final int maxIter = 500;
	static final double deltat = 1.0;
	double[][] X;
	double t;
	int optDim;
	double[] optVect1;
	double[] optVect2;
	int mandatoryOptDim;
	int[] mandatoryOptVect;
	static final int constexprDim = 2;
	static final double[] constexprVec = new double[] {1.1, 1.1};
	double[] varVec;
	int dynamicDim;
	double[] dynamicVec;

	public Variables(CartesianMesh2D aMesh)
	{
		// Mesh and mesh variables initialization
		mesh = aMesh;
		nbNodes = mesh.getNbNodes();

		// Allocate arrays
		X = new double[nbNodes][2];
		optVect1 = new double[2];
		optVect2 = new double[2];
		mandatoryOptVect = new int[2];
		varVec = new double[constexprDim];

		// Copy node coordinates
		double[][] gNodes = mesh.getGeometry().getNodes();
		IntStream.range(0, nbNodes).parallel().forEach(rNodes ->
		{
			X[rNodes][0] = gNodes[rNodes][0];
			X[rNodes][1] = gNodes[rNodes][1];
		});
	}

	public void jsonInit(final String jsonContent)
	{
		final Gson gson = new Gson();
		options = gson.fromJson(jsonContent, JsonObject.class);
	}

	/**
	 * Job initDynamicDim called @1.0 in simulate method.
	 * In variables: 
	 * Out variables: dynamicDim
	 */
	protected void initDynamicDim()
	{
		dynamicDim = 4;
	}

	/**
	 * Job initVarVec called @1.0 in simulate method.
	 * In variables: constexprDim
	 * Out variables: varVec
	 */
	protected void initVarVec()
	{
		varVec = new double[] {2.2, 2.2};
	}

	/**
	 * Job init_mandatoryOptDim called @1.0 in simulate method.
	 * In variables: 
	 * Out variables: mandatoryOptDim
	 */
	protected void init_mandatoryOptDim()
	{
		assert(options.has("mandatoryOptDim"));
		final JsonElement valueof_mandatoryOptDim = options.get("mandatoryOptDim");
		assert(valueof_mandatoryOptDim.isJsonPrimitive());
		mandatoryOptDim = valueof_mandatoryOptDim.getAsJsonPrimitive().getAsInt();
	}

	/**
	 * Job init_mandatoryOptVect called @1.0 in simulate method.
	 * In variables: 
	 * Out variables: mandatoryOptVect
	 */
	protected void init_mandatoryOptVect()
	{
		assert(options.has("mandatoryOptVect"));
		final JsonElement valueof_mandatoryOptVect = options.get("mandatoryOptVect");
		assert(valueof_mandatoryOptVect.isJsonArray());
		assert(valueof_mandatoryOptVect.getAsJsonArray().size() == 2);
		for (int i1=0 ; i1<2 ; i1++)
		{
			assert(valueof_mandatoryOptVect.getAsJsonArray().get(i1).isJsonPrimitive());
			mandatoryOptVect[i1] = valueof_mandatoryOptVect.getAsJsonArray().get(i1).getAsJsonPrimitive().getAsInt();
		}
	}

	/**
	 * Job init_optDim called @1.0 in simulate method.
	 * In variables: 
	 * Out variables: optDim
	 */
	protected void init_optDim()
	{
		if (options.has("optDim"))
		{
			final JsonElement valueof_optDim = options.get("optDim");
			assert(valueof_optDim.isJsonPrimitive());
			optDim = valueof_optDim.getAsJsonPrimitive().getAsInt();
		}
		else
		{
			optDim = 2;
		}
	}

	/**
	 * Job init_optVect1 called @1.0 in simulate method.
	 * In variables: 
	 * Out variables: optVect1
	 */
	protected void init_optVect1()
	{
		if (options.has("optVect1"))
		{
			final JsonElement valueof_optVect1 = options.get("optVect1");
			assert(valueof_optVect1.isJsonArray());
			assert(valueof_optVect1.getAsJsonArray().size() == 2);
			for (int i1=0 ; i1<2 ; i1++)
			{
				assert(valueof_optVect1.getAsJsonArray().get(i1).isJsonPrimitive());
				optVect1[i1] = valueof_optVect1.getAsJsonArray().get(i1).getAsJsonPrimitive().getAsDouble();
			}
		}
		else
		{
			optVect1 = new double[] {1.0, 1.0};
		}
	}

	/**
	 * Job init_optVect2 called @1.0 in simulate method.
	 * In variables: 
	 * Out variables: optVect2
	 */
	protected void init_optVect2()
	{
		if (options.has("optVect2"))
		{
			final JsonElement valueof_optVect2 = options.get("optVect2");
			assert(valueof_optVect2.isJsonArray());
			assert(valueof_optVect2.getAsJsonArray().size() == 2);
			for (int i1=0 ; i1<2 ; i1++)
			{
				assert(valueof_optVect2.getAsJsonArray().get(i1).isJsonPrimitive());
				optVect2[i1] = valueof_optVect2.getAsJsonArray().get(i1).getAsJsonPrimitive().getAsDouble();
			}
		}
		else
		{
			optVect2 = new double[] {1.0, 1.0};
		}
	}

	/**
	 * Job init_varVec called @1.0 in simulate method.
	 * In variables: constexprDim
	 * Out variables: varVec
	 */
	protected void init_varVec()
	{
		varVec = new double[] {1.0, 1.0};
	}

	/**
	 * Job init_dynamicVec called @2.0 in simulate method.
	 * In variables: dynamicDim
	 * Out variables: dynamicVec
	 */
	protected void init_dynamicVec()
	{
		dynamicVec = new double[dynamicDim];
	}

	/**
	 * Job testJob called @2.0 in simulate method.
	 * In variables: constexprDim, constexprVec, dynamicDim, mandatoryOptDim, mandatoryOptVect, optDim, optVect1, optVect2, varVec
	 * Out variables: dynamicVec
	 */
	protected void testJob()
	{
		final boolean testOptDim = assertEquals(2, optDim);
		final boolean testOptVect1 = assertEquals(new double[] {1.0, 1.0}, optVect1);
		final boolean testOptVect2 = assertEquals(new double[] {2.0, 2.0}, optVect2);
		final boolean testMandatoryOptDim = assertEquals(3, mandatoryOptDim);
		final boolean testMandatoryOptVect = assertEquals(new int[] {3, 3}, mandatoryOptVect);
		final boolean testConstexprDim = assertEquals(2, constexprDim);
		final boolean testConstexprVec = assertEquals(new double[] {1.1, 1.1}, constexprVec);
		final boolean testVarVec = assertEquals(new double[] {2.2, 2.2}, varVec);
		final boolean testDynamicDim = assertEquals(4, dynamicDim);
		int cpt = 1;
		for (int i=0; i<dynamicDim; i++)
		{
			cpt = cpt + 1;
			dynamicVec[i] = 3.3;
		}
		final boolean testDynamicVecLength = assertEquals(4, cpt);
	}

	private static boolean assertEquals(int expected, int actual)
	{
		final boolean ret = (expected == actual);
		if (!ret)
			throw new RuntimeException("** Assertion failed");
		return ret;
	}

	private static boolean assertEquals(double[] expected, double[] actual)
	{
		for (int i=0; i<expected.length; i++)
		{
			if (expected[i] != actual[i])
				throw new RuntimeException("** Assertion failed");
		}
		return true;
	}

	private static boolean assertEquals(int[] expected, int[] actual)
	{
		for (int i=0; i<expected.length; i++)
		{
			if (expected[i] != actual[i])
				throw new RuntimeException("** Assertion failed");
		}
		return true;
	}

	public void simulate()
	{
		System.out.println("Start execution of variables");
		initDynamicDim(); // @1.0
		initVarVec(); // @1.0
		init_mandatoryOptDim(); // @1.0
		init_mandatoryOptVect(); // @1.0
		init_optDim(); // @1.0
		init_optVect1(); // @1.0
		init_optVect2(); // @1.0
		init_varVec(); // @1.0
		init_dynamicVec(); // @2.0
		testJob(); // @2.0
		System.out.println("End of execution of variables");
	}

	public static void main(String[] args) throws IOException
	{
		if (args.length == 1)
		{
			final String dataFileName = args[0];
			final Gson gson = new Gson();
			final JsonObject o = gson.fromJson(new FileReader(dataFileName), JsonObject.class);

			// Mesh instanciation
			assert(o.has("mesh"));
			CartesianMesh2D mesh = new CartesianMesh2D();
			mesh.jsonInit(o.get("mesh").toString());

			// Module instanciation(s)
			Variables variables = new Variables(mesh);
			if (o.has("variables")) variables.jsonInit(o.get("variables").toString());

			// Start simulation
			variables.simulate();
		}
		else
		{
			System.err.println("[ERROR] Wrong number of arguments: expected 1, actual " + args.length);
			System.err.println("        Expecting user data file name, for example Variables.json");
			System.exit(1);
		}
	}
};
