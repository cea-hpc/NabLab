/* DO NOT EDIT THIS FILE - it is machine generated */

package variables;

import java.io.FileReader;
import java.io.IOException;
import java.util.stream.IntStream;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonElement;

import fr.cea.nabla.javalib.*;
import fr.cea.nabla.javalib.mesh.*;

public final class Variables
{
	// Json block of options
	private JsonObject options;

	// Mesh and mesh variables
	private final CartesianMesh2D mesh;
	@SuppressWarnings("unused")
	private final int nbNodes, maxCellsOfNode;

	// Options and global variables
	static final double maxTime = 0.1;
	static final int maxIter = 500;
	static final double deltat = 1.0;
	double t;
	double[] arrayOption;
	static final int dim = 2;
	double[] v1;
	double[] v2;
	double[][] X;
	int unknownDim;
	double[] dynamicArray;
	int optionDim;
	double[] dynamicOptArray;
	double[] optionArray;

	public Variables(CartesianMesh2D aMesh)
	{
		// Mesh and mesh variables initialization
		mesh = aMesh;
		nbNodes = mesh.getNbNodes();
		maxCellsOfNode = CartesianMesh2D.MaxNbCellsOfNode;

		// Allocate arrays
		arrayOption = new double[2];
		v1 = new double[2];
		v2 = new double[dim];
		X = new double[nbNodes][dim];

		// Copy node coordinates
		double[][] gNodes = mesh.getGeometry().getNodes();
		IntStream.range(0, nbNodes).parallel().forEach(rNodes ->
		{
			X[rNodes][0] = gNodes[rNodes][0];
			X[rNodes][1] = gNodes[rNodes][1];
		});
	}

	public void jsonInit(final String jsonContent)
	{
		final Gson gson = new Gson();
		options = gson.fromJson(jsonContent, JsonObject.class);
	}

	/**
	 * Job init_arrayOption called @1.0 in simulate method.
	 * In variables: 
	 * Out variables: arrayOption
	 */
	protected void init_arrayOption()
	{
		assert(options.has("arrayOption"));
		final JsonElement valueof_arrayOption = options.get("arrayOption");
		assert(valueof_arrayOption.isJsonArray());
		assert(valueof_arrayOption.getAsJsonArray().size() == 2);
		for (int i1=0 ; i1<2 ; i1++)
		{
			assert(valueof_arrayOption.getAsJsonArray().get(i1).isJsonPrimitive());
			arrayOption[i1] = valueof_arrayOption.getAsJsonArray().get(i1).getAsJsonPrimitive().getAsDouble();
		}
	}

	/**
	 * Job init_optionDim called @1.0 in simulate method.
	 * In variables: 
	 * Out variables: optionDim
	 */
	protected void init_optionDim()
	{
		assert(options.has("optionDim"));
		final JsonElement valueof_optionDim = options.get("optionDim");
		assert(valueof_optionDim.isJsonPrimitive());
		optionDim = valueof_optionDim.getAsJsonPrimitive().getAsInt();
	}

	/**
	 * Job newVar called @1.0 in simulate method.
	 * In variables: 
	 * Out variables: 
	 */
	protected void newVar()
	{
		IntStream.range(0, nbNodes).parallel().forEach(rNodes -> 
		{
			final int rId = rNodes;
			final int localNbCells = mesh.getCellsOfNode(rId).length;
			double[] tmp = new double[localNbCells];
		});
	}

	/**
	 * Job setUnknownDim called @1.0 in simulate method.
	 * In variables: 
	 * Out variables: unknownDim
	 */
	protected void setUnknownDim()
	{
		unknownDim = 4;
	}

	/**
	 * Job init_dynamicArray called @2.0 in simulate method.
	 * In variables: unknownDim
	 * Out variables: dynamicArray
	 */
	protected void init_dynamicArray()
	{
		dynamicArray = new double[unknownDim];
	}

	/**
	 * Job init_dynamicOptArray called @2.0 in simulate method.
	 * In variables: optionDim
	 * Out variables: dynamicOptArray
	 */
	protected void init_dynamicOptArray()
	{
		dynamicOptArray = new double[optionDim];
	}

	/**
	 * Job init_optionArray called @2.0 in simulate method.
	 * In variables: optionDim
	 * Out variables: optionArray
	 */
	protected void init_optionArray()
	{
		optionArray = new double[optionDim];
		assert(options.has("optionArray"));
		final JsonElement valueof_optionArray = options.get("optionArray");
		assert(valueof_optionArray.isJsonArray());
		assert(valueof_optionArray.getAsJsonArray().size() == optionDim);
		for (int i1=0 ; i1<optionDim ; i1++)
		{
			assert(valueof_optionArray.getAsJsonArray().get(i1).isJsonPrimitive());
			optionArray[i1] = valueof_optionArray.getAsJsonArray().get(i1).getAsJsonPrimitive().getAsDouble();
		}
	}

	public void simulate()
	{
		System.out.println("Start execution of variables");
		init_arrayOption(); // @1.0
		init_optionDim(); // @1.0
		newVar(); // @1.0
		setUnknownDim(); // @1.0
		init_dynamicArray(); // @2.0
		init_dynamicOptArray(); // @2.0
		init_optionArray(); // @2.0
		System.out.println("End of execution of variables");
	}

	public static void main(String[] args) throws IOException
	{
		if (args.length == 1)
		{
			final String dataFileName = args[0];
			final Gson gson = new Gson();
			final JsonObject o = gson.fromJson(new FileReader(dataFileName), JsonObject.class);

			// Mesh instanciation
			assert(o.has("mesh"));
			CartesianMesh2D mesh = new CartesianMesh2D();
			mesh.jsonInit(o.get("mesh").toString());

			// Module instanciation(s)
			Variables variables = new Variables(mesh);
			if (o.has("variables")) variables.jsonInit(o.get("variables").toString());

			// Start simulation
			variables.simulate();
		}
		else
		{
			System.err.println("[ERROR] Wrong number of arguments: expected 1, actual " + args.length);
			System.err.println("        Expecting user data file name, for example Variables.json");
			System.exit(1);
		}
	}
};
