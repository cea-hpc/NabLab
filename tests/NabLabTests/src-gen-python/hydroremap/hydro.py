"""
DO NOT EDIT THIS FILE - it is machine generated
"""
import sys
import json
import numpy as np
from r1 import R1
from r2 import R2
from cartesianmesh2d import CartesianMesh2D

class Hydro:
	t = 0.0

	def __init__(self, mesh):
		self.__mesh = mesh
		self.__nbNodes = mesh.nbNodes
		self.__nbCells = mesh.nbCells

	def jsonInit(self, jsonContent):
		self.maxIter = jsonContent["maxIter"]
		self.maxTime = jsonContent["maxTime"]
		self.delta_t = jsonContent["delta_t"]
		self.X = np.empty((self.__nbNodes, 2), dtype=np.double)
		self.hv1 = np.empty((self.__nbCells), dtype=np.double)
		self.hv2 = np.empty((self.__nbCells), dtype=np.double)
		self.hv3 = np.empty((self.__nbCells), dtype=np.double)
		self.hv4 = np.empty((self.__nbCells), dtype=np.double)
		self.hv5 = np.empty((self.__nbCells), dtype=np.double)
		self.hv6 = np.empty((self.__nbCells), dtype=np.double)
		self.hv7 = np.empty((self.__nbCells), dtype=np.double)

		# Copy node coordinates
		gNodes = mesh.geometry.nodes
		for rNodes in range(self.__nbNodes):
			self.X[rNodes] = gNodes[rNodes]

	"""
	 Job iniHv1 called @1.0 in simulate method.
	 In variables: 
	 Out variables: hv1
	"""
	def _iniHv1(self):
		for cCells in range(self.__nbCells):
			self.hv1[cCells] = 2.0

	"""
	 Job iniHv2 called @1.0 in simulate method.
	 In variables: 
	 Out variables: hv2
	"""
	def _iniHv2(self):
		for cCells in range(self.__nbCells):
			self.hv2[cCells] = 0.0

	"""
	 Job hj1 called @2.0 in simulate method.
	 In variables: hv2
	 Out variables: hv3
	"""
	def _hj1(self):
		for cCells in range(self.__nbCells):
			self.hv3[cCells] = self.hv2[cCells] + 1.0

	"""
	 Job oracleHv1 called @2.0 in simulate method.
	 In variables: hv1
	 Out variables: 
	"""
	def _oracleHv1(self):
		for cCells in range(self.__nbCells):
			testHv1 = self.__assertEquals1(2.0, self.hv1[cCells])

	"""
	 Job oracleHv2 called @2.0 in simulate method.
	 In variables: hv2
	 Out variables: 
	"""
	def _oracleHv2(self):
		for cCells in range(self.__nbCells):
			testHv2 = self.__assertEquals1(0.0, self.hv2[cCells])

	"""
	 Job hj2 called @3.0 in simulate method.
	 In variables: hv3
	 Out variables: hv5
	"""
	def _hj2(self):
		for cCells in range(self.__nbCells):
			self.hv5[cCells] = self.hv3[cCells] + 2.0

	"""
	 Job oracleHv3 called @3.0 in simulate method.
	 In variables: hv3
	 Out variables: 
	"""
	def _oracleHv3(self):
		for cCells in range(self.__nbCells):
			testHv3 = self.__assertEquals1(1.0, self.hv3[cCells])

	"""
	 Job oracleHv4 called @3.0 in simulate method.
	 In variables: hv4
	 Out variables: 
	"""
	def _oracleHv4(self):
		for cCells in range(self.__nbCells):
			testHv4 = self.__assertEquals1(4.0, self.hv4[cCells])

	"""
	 Job oracleHv5 called @4.0 in simulate method.
	 In variables: hv5
	 Out variables: 
	"""
	def _oracleHv5(self):
		for cCells in range(self.__nbCells):
			testHv5 = self.__assertEquals1(3.0, self.hv5[cCells])

	"""
	 Job hj3 called @5.0 in simulate method.
	 In variables: hv4, hv5, hv6
	 Out variables: hv7
	"""
	def _hj3(self):
		for cCells in range(self.__nbCells):
			self.hv7[cCells] = self.hv4[cCells] + self.hv5[cCells] + self.hv6[cCells]

	"""
	 Job oracleHv6 called @5.0 in simulate method.
	 In variables: hv6
	 Out variables: 
	"""
	def _oracleHv6(self):
		for cCells in range(self.__nbCells):
			testHv6 = self.__assertEquals1(6.0, self.hv6[cCells])

	"""
	 Job oracleHv7 called @6.0 in simulate method.
	 In variables: hv7
	 Out variables: 
	"""
	def _oracleHv7(self):
		for cCells in range(self.__nbCells):
			testHv7 = self.__assertEquals1(13.0, self.hv7[cCells])

	def __assertEquals1(self, expected, actual):
		ret = (expected == actual)
		if not ret:
			raise Exception("** Assertion failed");
		return ret

	def simulate(self):
		print("Start execution of hydro")
		self._iniHv1() # @1.0
		self._iniHv2() # @1.0
		self._hj1() # @2.0
		self._oracleHv1() # @2.0
		self._oracleHv2() # @2.0
		self._r1._rj1() # @2.0
		self._hj2() # @3.0
		self._oracleHv3() # @3.0
		self._oracleHv4() # @3.0
		self._r2._rj1() # @3.0
		self._r1._rj2() # @3.0
		self._oracleHv5() # @4.0
		self._r2._rj2() # @4.0
		self._hj3() # @5.0
		self._oracleHv6() # @5.0
		self._oracleHv7() # @6.0
		print("End of execution of hydro")

	def set_r1(self, value):
		self._r1 = value

	def set_r2(self, value):
		self._r2 = value

if __name__ == '__main__':
	args = sys.argv[1:]
	
	if len(args) == 1:
		f = open(args[0])
		data = json.load(f)
		f.close()

		# Mesh instanciation
		mesh = CartesianMesh2D()
		mesh.jsonInit(data["mesh"])

		# Module instanciation
		hydro = Hydro(mesh)
		hydro.jsonInit(data["hydro"])
		r1 = R1(mesh)
		r1.set_mainModule(hydro)
		r1.jsonInit(data["r1"])
		r2 = R2(mesh)
		r2.set_mainModule(hydro)
		r2.jsonInit(data["r2"])

		# Start simulation
		hydro.simulate()
	else:
		print("[ERROR] Wrong number of arguments: expected 1, actual " + str(len(args)), file=sys.stderr)
		print("        Expecting user data file name, for example HydroRemap.json", file=sys.stderr)
		exit(1)
