"""
DO NOT EDIT THIS FILE - it is machine generated
"""
import sys
import json
import numpy as np
from cartesianmesh2d import CartesianMesh2D

class Iteration:
	maxTime = 0.1
	deltat = 1.0
	maxIterN = 10
	maxIterK = 6
	maxIterL = 7

	def __init__(self, mesh):
		self.__mesh = mesh
		self.__nbNodes = mesh.nbNodes
		self.__nbCells = mesh.nbCells

	def jsonInit(self, jsonContent):
		self.n = 0
		self.k = 0
		self.l = 0
		self.X = np.empty((self.__nbNodes, 2), dtype=np.double)
		self.vn_n = np.empty((self.__nbCells), dtype=np.double)
		self.vn_nplus1 = np.empty((self.__nbCells), dtype=np.double)
		self.vn_n0 = np.empty((self.__nbCells), dtype=np.double)
		self.vk_n = np.empty((self.__nbCells), dtype=np.double)
		self.vk_nplus1 = np.empty((self.__nbCells), dtype=np.double)
		self.vk_nplus1_k = np.empty((self.__nbCells), dtype=np.double)
		self.vk_nplus1_kplus1 = np.empty((self.__nbCells), dtype=np.double)
		self.vk_nplus1_k0 = np.empty((self.__nbCells), dtype=np.double)
		self.vl_n = np.empty((self.__nbCells), dtype=np.double)
		self.vl_nplus1 = np.empty((self.__nbCells), dtype=np.double)
		self.vl_nplus1_l = np.empty((self.__nbCells), dtype=np.double)
		self.vl_nplus1_lplus1 = np.empty((self.__nbCells), dtype=np.double)
		self.vl_nplus1_l0 = np.empty((self.__nbCells), dtype=np.double)

		# Copy node coordinates
		gNodes = mesh.geometry.nodes
		for rNodes in range(self.__nbNodes):
			self.X[rNodes] = gNodes[rNodes]

	"""
	 Job computeTn called @1.0 in executeTimeLoopN method.
	 In variables: deltat, t_n
	 Out variables: t_nplus1
	"""
	def _computeTn(self):
		self.t_nplus1 = self.t_n + self.deltat

	"""
	 Job iniTime called @1.0 in simulate method.
	 In variables: 
	 Out variables: t_n0
	"""
	def _iniTime(self):
		self.t_n0 = 0.0

	"""
	 Job iniVk called @1.0 in simulate method.
	 In variables: 
	 Out variables: vk_nplus1_k0
	"""
	def _iniVk(self):
		for jCells in range(self.__nbCells):
			self.vk_nplus1_k0[jCells] = 0.0

	"""
	 Job iniVn called @1.0 in simulate method.
	 In variables: 
	 Out variables: vn_n0
	"""
	def _iniVn(self):
		for jCells in range(self.__nbCells):
			self.vn_n0[jCells] = 0.0

	"""
	 Job setUpTimeLoopK called @1.0 in executeTimeLoopN method.
	 In variables: vk_nplus1_k0
	 Out variables: vk_nplus1_k
	"""
	def _setUpTimeLoopK(self):
		for i1Cells in range(self.__nbCells):
			self.vk_nplus1_k[i1Cells] = self.vk_nplus1_k0[i1Cells]

	"""
	 Job updateVk called @1.0 in executeTimeLoopK method.
	 In variables: vk_nplus1_k
	 Out variables: vk_nplus1_kplus1
	"""
	def _updateVk(self):
		for jCells in range(self.__nbCells):
			self.vk_nplus1_kplus1[jCells] = self.vk_nplus1_k[jCells] + 2

	"""
	 Job updateVl called @1.0 in executeTimeLoopL method.
	 In variables: vl_nplus1_l
	 Out variables: vl_nplus1_lplus1
	"""
	def _updateVl(self):
		for jCells in range(self.__nbCells):
			self.vl_nplus1_lplus1[jCells] = self.vl_nplus1_l[jCells] + 1

	"""
	 Job executeTimeLoopK called @2.0 in executeTimeLoopN method.
	 In variables: k, maxIterK, vk_nplus1_k
	 Out variables: vk_nplus1_kplus1
	"""
	def _executeTimeLoopK(self):
		self.k = 0
		self.t_n = 0.0
		continueLoop = True
		while continueLoop:
			self.k += 1
			print("Start iteration k: %5d\n" % (self.k))
		
			self._updateVk() # @1.0
		
			# Evaluate loop condition with variables at time n
			continueLoop = (self.k < self.maxIterK)
		
			for i1Cells in range(self.__nbCells):
				self.vk_nplus1_k[i1Cells] = self.vk_nplus1_kplus1[i1Cells]

	"""
	 Job setUpTimeLoopN called @2.0 in simulate method.
	 In variables: t_n0, vn_n0
	 Out variables: t_n, vn_n
	"""
	def _setUpTimeLoopN(self):
		self.t_n = self.t_n0
		for i1Cells in range(self.__nbCells):
			self.vn_n[i1Cells] = self.vn_n0[i1Cells]

	"""
	 Job executeTimeLoopN called @3.0 in simulate method.
	 In variables: maxIterN, n, t_n, vk_n, vl_n, vn_n
	 Out variables: t_nplus1, vk_nplus1, vl_nplus1, vn_nplus1
	"""
	def _executeTimeLoopN(self):
		self.n = 0
		self.t_n = 0.0
		continueLoop = True
		while continueLoop:
			self.n += 1
			print("START ITERATION n: %5d - t: %5.5f - deltat: %5.5f\n" % (self.n, self.t_n, self.deltat))
		
			self._computeTn() # @1.0
			self._setUpTimeLoopK() # @1.0
			self._executeTimeLoopK() # @2.0
			self._tearDownTimeLoopK() # @3.0
			self._iniVl() # @4.0
			self._oracleVk() # @4.0
			self._setUpTimeLoopL() # @5.0
			self._executeTimeLoopL() # @6.0
			self._tearDownTimeLoopL() # @7.0
			self._oracleVl() # @8.0
			self._updateVn() # @8.0
			self._oracleVn() # @9.0
		
			# Evaluate loop condition with variables at time n
			continueLoop = (self.n < self.maxIterN)
		
			self.t_n = self.t_nplus1
			for i1Cells in range(self.__nbCells):
				self.vn_n[i1Cells] = self.vn_nplus1[i1Cells]
			for i1Cells in range(self.__nbCells):
				self.vk_n[i1Cells] = self.vk_nplus1[i1Cells]
			for i1Cells in range(self.__nbCells):
				self.vl_n[i1Cells] = self.vl_nplus1[i1Cells]
		
		print("FINAL TIME: %5.5f - deltat: %5.5f\n" % (self.t_n, self.deltat))

	"""
	 Job tearDownTimeLoopK called @3.0 in executeTimeLoopN method.
	 In variables: vk_nplus1_kplus1
	 Out variables: vk_nplus1
	"""
	def _tearDownTimeLoopK(self):
		for i1Cells in range(self.__nbCells):
			self.vk_nplus1[i1Cells] = self.vk_nplus1_kplus1[i1Cells]

	"""
	 Job iniVl called @4.0 in executeTimeLoopN method.
	 In variables: vk_nplus1
	 Out variables: vl_nplus1_l0
	"""
	def _iniVl(self):
		for jCells in range(self.__nbCells):
			self.vl_nplus1_l0[jCells] = self.vk_nplus1[jCells] + 8

	"""
	 Job oracleVk called @4.0 in executeTimeLoopN method.
	 In variables: vk_nplus1
	 Out variables: 
	"""
	def _oracleVk(self):
		for jCells in range(self.__nbCells):
			testVk = self.__assertEquals1(12.0, self.vk_nplus1[jCells])

	"""
	 Job setUpTimeLoopL called @5.0 in executeTimeLoopN method.
	 In variables: vl_nplus1_l0
	 Out variables: vl_nplus1_l
	"""
	def _setUpTimeLoopL(self):
		for i1Cells in range(self.__nbCells):
			self.vl_nplus1_l[i1Cells] = self.vl_nplus1_l0[i1Cells]

	"""
	 Job executeTimeLoopL called @6.0 in executeTimeLoopN method.
	 In variables: l, maxIterL, vl_nplus1_l
	 Out variables: vl_nplus1_lplus1
	"""
	def _executeTimeLoopL(self):
		self.l = 0
		self.t_n = 0.0
		continueLoop = True
		while continueLoop:
			self.l += 1
			print("Start iteration l: %5d\n" % (self.l))
		
			self._updateVl() # @1.0
		
			# Evaluate loop condition with variables at time n
			continueLoop = (self.l < self.maxIterL)
		
			for i1Cells in range(self.__nbCells):
				self.vl_nplus1_l[i1Cells] = self.vl_nplus1_lplus1[i1Cells]

	"""
	 Job tearDownTimeLoopL called @7.0 in executeTimeLoopN method.
	 In variables: vl_nplus1_lplus1
	 Out variables: vl_nplus1
	"""
	def _tearDownTimeLoopL(self):
		for i1Cells in range(self.__nbCells):
			self.vl_nplus1[i1Cells] = self.vl_nplus1_lplus1[i1Cells]

	"""
	 Job oracleVl called @8.0 in executeTimeLoopN method.
	 In variables: vl_nplus1
	 Out variables: 
	"""
	def _oracleVl(self):
		for jCells in range(self.__nbCells):
			testVl = self.__assertEquals1(27.0, self.vl_nplus1[jCells])

	"""
	 Job updateVn called @8.0 in executeTimeLoopN method.
	 In variables: vl_nplus1, vn_n
	 Out variables: vn_nplus1
	"""
	def _updateVn(self):
		for jCells in range(self.__nbCells):
			self.vn_nplus1[jCells] = self.vn_n[jCells] + self.vl_nplus1[jCells] * 2

	"""
	 Job oracleVn called @9.0 in executeTimeLoopN method.
	 In variables: n, vn_nplus1
	 Out variables: 
	"""
	def _oracleVn(self):
		for jCells in range(self.__nbCells):
			testVn = self.__assertEquals1(54.0 * self.n, self.vn_nplus1[jCells])

	def __assertEquals1(self, expected, actual):
		ret = (expected == actual)
		if not ret:
			raise Exception("** Assertion failed");
		return ret

	def simulate(self):
		print("Start execution of iteration")
		self._iniTime() # @1.0
		self._iniVk() # @1.0
		self._iniVn() # @1.0
		self._setUpTimeLoopN() # @2.0
		self._executeTimeLoopN() # @3.0
		print("End of execution of iteration")

if __name__ == '__main__':
	args = sys.argv[1:]
	
	if len(args) == 1:
		f = open(args[0])
		data = json.load(f)
		f.close()

		# Mesh instanciation
		mesh = CartesianMesh2D()
		mesh.jsonInit(data["mesh"])

		# Module instanciation
		iteration = Iteration(mesh)
		iteration.jsonInit(data["iteration"])

		# Start simulation
		iteration.simulate()
	else:
		print("[ERROR] Wrong number of arguments: expected 1, actual " + str(len(args)), file=sys.stderr)
		print("        Expecting user data file name, for example Iteration.json", file=sys.stderr)
		exit(1)
